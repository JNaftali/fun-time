{"version":3,"file":"router.development.js","sources":["../../../../../packages/router/history.ts","../../../../../packages/router/utils.ts","../../../../../packages/router/router.ts","../../../../../packages/router/index.ts"],"sourcesContent":["////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Actions represent the type of change to a location value.\n */\nexport enum Action {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Pop = \"POP\",\n\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n  Push = \"PUSH\",\n\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n  Replace = \"REPLACE\",\n}\n\n/**\n * The pathname, search, and hash values of a URL.\n */\nexport interface Path {\n  /**\n   * A URL pathname, beginning with a /.\n   */\n  pathname: string;\n\n  /**\n   * A URL search string, beginning with a ?.\n   */\n  search: string;\n\n  /**\n   * A URL fragment identifier, beginning with a #.\n   */\n  hash: string;\n}\n\n/**\n * An entry in a history stack. A location contains information about the\n * URL path, as well as possibly some arbitrary state and a key.\n */\nexport interface Location extends Path {\n  /**\n   * A value of arbitrary data associated with this location.\n   */\n  state: any;\n\n  /**\n   * A unique string associated with this location. May be used to safely store\n   * and retrieve data in some other storage API, like `localStorage`.\n   *\n   * Note: This value is always \"default\" on the initial location.\n   */\n  key: string;\n}\n\n/**\n * A change to the current location.\n */\nexport interface Update {\n  /**\n   * The action that triggered the change.\n   */\n  action: Action;\n\n  /**\n   * The new location.\n   */\n  location: Location;\n}\n\n/**\n * A function that receives notifications about location changes.\n */\nexport interface Listener {\n  (update: Update): void;\n}\n\n/**\n * Describes a location that is the destination of some navigation, either via\n * `history.push` or `history.replace`. May be either a URL or the pieces of a\n * URL path.\n */\nexport type To = string | Partial<Path>;\n\n/**\n * A history is an interface to the navigation stack. The history serves as the\n * source of truth for the current location, as well as provides a set of\n * methods that may be used to change it.\n *\n * It is similar to the DOM's `window.history` object, but with a smaller, more\n * focused API.\n */\nexport interface History {\n  /**\n   * The last action that modified the current location. This will always be\n   * Action.Pop when a history instance is first created. This value is mutable.\n   */\n  readonly action: Action;\n\n  /**\n   * The current location. This value is mutable.\n   */\n  readonly location: Location;\n\n  /**\n   * Returns a valid href for the given `to` value that may be used as\n   * the value of an <a href> attribute.\n   *\n   * @param to - The destination URL\n   */\n  createHref(to: To): string;\n\n  /**\n   * Pushes a new location onto the history stack, increasing its length by one.\n   * If there were any entries in the stack after the current one, they are\n   * lost.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  push(to: To, state?: any): void;\n\n  /**\n   * Replaces the current location in the history stack with a new one.  The\n   * location that was replaced will no longer be available.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  replace(to: To, state?: any): void;\n\n  /**\n   * Navigates `n` entries backward/forward in the history stack relative to the\n   * current index. For example, a \"back\" navigation would use go(-1).\n   *\n   * @param delta - The delta in the stack index\n   */\n  go(delta: number): void;\n\n  /**\n   * Sets up a listener that will be called whenever the current location\n   * changes.\n   *\n   * @param listener - A function that will be called when the location changes\n   * @returns unlisten - A function that may be used to stop listening\n   */\n  listen(listener: Listener): () => void;\n}\n\ntype HistoryState = {\n  usr: any;\n  key?: string;\n};\n\nconst PopStateEventType = \"popstate\";\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Memory History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A user-supplied object that describes a location. Used when providing\n * entries to `createMemoryHistory` via its `initialEntries` option.\n */\nexport type InitialEntry = string | Partial<Location>;\n\nexport type MemoryHistoryOptions = {\n  initialEntries?: InitialEntry[];\n  initialIndex?: number;\n  v5Compat?: boolean;\n};\n\n/**\n * A memory history stores locations in memory. This is useful in stateful\n * environments where there is no web browser, such as node tests or React\n * Native.\n */\nexport interface MemoryHistory extends History {\n  /**\n   * The current index in the history stack.\n   */\n  readonly index: number;\n}\n\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\nexport function createMemoryHistory(\n  options: MemoryHistoryOptions = {}\n): MemoryHistory {\n  let { initialEntries = [\"/\"], initialIndex, v5Compat = false } = options;\n  let entries: Location[]; // Declare so we can access from createMemoryLocation\n  entries = initialEntries.map((entry, index) =>\n    createMemoryLocation(entry, null, index === 0 ? \"default\" : undefined)\n  );\n  let index = clampIndex(\n    initialIndex == null ? entries.length - 1 : initialIndex\n  );\n  let action = Action.Pop;\n  let listeners = createEvents<Listener>();\n\n  function clampIndex(n: number): number {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n  function getCurrentLocation(): Location {\n    return entries[index];\n  }\n  function createMemoryLocation(\n    to: To,\n    state: any = null,\n    key?: string\n  ): Location {\n    let location = createLocation(\n      entries ? getCurrentLocation().pathname : \"/\",\n      to,\n      state,\n      key\n    );\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in memory history: ${JSON.stringify(\n        to\n      )}`\n    );\n    return location;\n  }\n\n  let history: MemoryHistory = {\n    get index() {\n      return index;\n    },\n    get action() {\n      return action;\n    },\n    get location() {\n      return getCurrentLocation();\n    },\n    createHref(to) {\n      return typeof to === \"string\" ? to : createPath(to);\n    },\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n      if (v5Compat) {\n        listeners.call({ action, location: nextLocation });\n      }\n    },\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n      if (v5Compat) {\n        listeners.call({ action, location: nextLocation });\n      }\n    },\n    go(delta) {\n      action = Action.Pop;\n      index = clampIndex(index + delta);\n      listeners.call({ action, location: getCurrentLocation() });\n    },\n    listen(listener) {\n      return listeners.push(listener);\n    },\n  };\n\n  return history;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Browser History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A browser history stores the current location in regular URLs in a web\n * browser environment. This is the standard for most web apps and provides the\n * cleanest URLs the browser's address bar.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#browserhistory\n */\nexport interface BrowserHistory extends UrlHistory {}\n\nexport type BrowserHistoryOptions = UrlHistoryOptions;\n\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\nexport function createBrowserHistory(\n  options: BrowserHistoryOptions = {}\n): BrowserHistory {\n  function createBrowserLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let { pathname, search, hash } = window.location;\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      globalHistory.state?.usr || null,\n      globalHistory.state?.key || \"default\"\n    );\n  }\n\n  function createBrowserHref(window: Window, to: To) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  return getUrlBasedHistory(\n    createBrowserLocation,\n    createBrowserHref,\n    null,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Hash History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A hash history stores the current location in the fragment identifier portion\n * of the URL in a web browser environment.\n *\n * This is ideal for apps that do not control the server for some reason\n * (because the fragment identifier is never sent to the server), including some\n * shared hosting environments that do not provide fine-grained controls over\n * which pages are served at which URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#hashhistory\n */\nexport interface HashHistory extends UrlHistory {}\n\nexport type HashHistoryOptions = UrlHistoryOptions;\n\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\nexport function createHashHistory(\n  options: HashHistoryOptions = {}\n): HashHistory {\n  function createHashLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\",\n    } = parsePath(window.location.hash.substr(1));\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      globalHistory.state?.usr || null,\n      globalHistory.state?.key || \"default\"\n    );\n  }\n\n  function createHashHref(window: Window, to: To) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n\n  function validateHashLocation(location: Location, to: To) {\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in hash history.push(${JSON.stringify(\n        to\n      )})`\n    );\n  }\n\n  return getUrlBasedHistory(\n    createHashLocation,\n    createHashHref,\n    validateHashLocation,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region UTILS\n////////////////////////////////////////////////////////////////////////////////\n\nconst readOnly: <T>(obj: T) => Readonly<T> = __DEV__\n  ? (obj) => Object.freeze(obj)\n  : (obj) => obj;\n\nfunction warning(cond: any, message: string) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\ntype Events<F> = {\n  length: number;\n  push: (fn: F) => () => void;\n  call: (arg: any) => void;\n};\n\nfunction createEvents<F extends Function>(): Events<F> {\n  let handlers: F[] = [];\n\n  return {\n    get length() {\n      return handlers.length;\n    },\n    push(fn: F) {\n      handlers.push(fn);\n      return function () {\n        handlers = handlers.filter((handler) => handler !== fn);\n      };\n    },\n    call(arg) {\n      handlers.forEach((fn) => fn && fn(arg));\n    },\n  };\n}\n\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n\n/**\n * For browser-based histories, we combine the state and key into an object\n */\nfunction getHistoryState(location: Location): HistoryState {\n  return {\n    usr: location.state,\n    key: location.key,\n  };\n}\n\n/**\n * Creates a Location object with a unique key from the given Path\n */\nexport function createLocation(\n  current: string | Location,\n  to: To,\n  state: any = null,\n  key?: string\n): Location {\n  return readOnly<Location>({\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\",\n    ...(typeof to === \"string\" ? parsePath(to) : to),\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: (to as Location)?.key || key || createKey(),\n  });\n}\n\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\nexport function createPath({\n  pathname = \"/\",\n  search = \"\",\n  hash = \"\",\n}: Partial<Path>) {\n  if (search && search !== \"?\")\n    pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\")\n    pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\nexport function parsePath(path: string): Partial<Path> {\n  let parsedPath: Partial<Path> = {};\n\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n\n    let searchIndex = path.indexOf(\"?\");\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n\n  return parsedPath;\n}\n\nexport interface UrlHistory extends History {}\n\nexport type UrlHistoryOptions = {\n  window?: Window;\n  v5Compat?: boolean;\n};\n\nfunction getUrlBasedHistory(\n  getLocation: (window: Window, globalHistory: Window[\"history\"]) => Location,\n  createHref: (window: Window, to: To) => string,\n  validateLocation: ((location: Location, to: To) => void) | null,\n  options: UrlHistoryOptions = {}\n): UrlHistory {\n  let { window = document.defaultView!, v5Compat = false } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listeners = createEvents<Listener>();\n\n  window.addEventListener(PopStateEventType, () => {\n    action = Action.Pop;\n    listeners.call({ action, location: history.location });\n  });\n\n  function push(to: To, state?: any) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    validateLocation?.(location, to);\n\n    let historyState = getHistoryState(location);\n    let url = history.createHref(location);\n\n    // try...catch because iOS limits us to 100 pushState calls :/\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n\n    if (v5Compat) {\n      listeners.call({ action, location });\n    }\n  }\n\n  function replace(to: To, state?: any) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    validateLocation?.(location, to);\n\n    let historyState = getHistoryState(location);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n\n    if (v5Compat) {\n      listeners.call({ action, location: location });\n    }\n  }\n\n  let history: History = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n    createHref(to) {\n      return createHref(window, to);\n    },\n    push,\n    replace,\n    go(n) {\n      return globalHistory.go(n);\n    },\n    listen(listener) {\n      return listeners.push(listener);\n    },\n  };\n\n  return history;\n}\n\n//#endregion\n","import type { Location, Path, To } from \"./history\";\nimport { parsePath } from \"./history\";\nimport { DataResult, DataRouteMatch, Transition } from \"./router\";\n\nexport type LoaderFormMethod = \"get\";\nexport type ActionFormMethod = \"post\" | \"put\" | \"patch\" | \"delete\";\nexport type FormMethod = LoaderFormMethod | ActionFormMethod;\nexport type FormEncType = \"application/x-www-form-urlencoded\";\n\n/**\n * Internal interface to pass around, not intended for external consumption\n */\nexport interface Submission {\n  formMethod: FormMethod;\n  formAction: string;\n  formEncType: FormEncType;\n  formData: FormData;\n}\n\nexport interface ActionSubmission extends Submission {\n  formMethod: ActionFormMethod;\n}\n\n/**\n * Arguments passed to route loader functions\n */\nexport interface LoaderFunctionArgs {\n  request: Request;\n  params: Params;\n  signal: AbortSignal;\n}\n\n/**\n * Arguments passed to route action functions\n */\nexport interface ActionFunctionArgs {\n  request: Request;\n  params: Params;\n  signal: AbortSignal;\n}\n\nexport interface ShouldRevalidateFunctionArgs {\n  currentUrl: URL;\n  currentParams: DataRouteMatch[\"params\"];\n  nextUrl: URL;\n  nextParams: DataRouteMatch[\"params\"];\n  transition: Transition;\n  actionResult: DataResult | null;\n  defaultShouldRevalidate: boolean;\n}\n\n/**\n * A route object represents a logical route, with (optionally) its child\n * routes organized in a tree-like structure.\n */\nexport interface RouteObject {\n  caseSensitive?: boolean;\n  children?: RouteObject[];\n  element?: React.ReactNode;\n  index?: boolean;\n  path?: string;\n  id?: string;\n  loader?: (obj: LoaderFunctionArgs) => any | Promise<any>;\n  action?: (obj: ActionFunctionArgs) => any | Promise<any>;\n  errorElement?: React.ReactNode;\n  shouldRevalidate?: (obj: ShouldRevalidateFunctionArgs) => boolean;\n}\n\n/**\n * A data route object, which is just a RouteObject with a required unique ID\n */\nexport interface DataRouteObject extends RouteObject {\n  children?: DataRouteObject[];\n  id: string;\n}\n\ntype ParamParseFailed = { failed: true };\n\ntype ParamParseSegment<Segment extends string> =\n  // Check here if there exists a forward slash in the string.\n  Segment extends `${infer LeftSegment}/${infer RightSegment}`\n    ? // If there is a forward slash, then attempt to parse each side of the\n      // forward slash.\n      ParamParseSegment<LeftSegment> extends infer LeftResult\n      ? ParamParseSegment<RightSegment> extends infer RightResult\n        ? LeftResult extends string\n          ? // If the left side is successfully parsed as a param, then check if\n            // the right side can be successfully parsed as well. If both sides\n            // can be parsed, then the result is a union of the two sides\n            // (read: \"foo\" | \"bar\").\n            RightResult extends string\n            ? LeftResult | RightResult\n            : LeftResult\n          : // If the left side is not successfully parsed as a param, then check\n          // if only the right side can be successfully parse as a param. If it\n          // can, then the result is just right, else it's a failure.\n          RightResult extends string\n          ? RightResult\n          : ParamParseFailed\n        : ParamParseFailed\n      : // If the left side didn't parse into a param, then just check the right\n      // side.\n      ParamParseSegment<RightSegment> extends infer RightResult\n      ? RightResult extends string\n        ? RightResult\n        : ParamParseFailed\n      : ParamParseFailed\n    : // If there's no forward slash, then check if this segment starts with a\n    // colon. If it does, then this is a dynamic segment, so the result is\n    // just the remainder of the string. Otherwise, it's a failure.\n    Segment extends `:${infer Remaining}`\n    ? Remaining\n    : ParamParseFailed;\n\n// Attempt to parse the given string segment. If it fails, then just return the\n// plain string type as a default fallback. Otherwise return the union of the\n// parsed string literals that were referenced as dynamic segments in the route.\nexport type ParamParseKey<Segment extends string> =\n  ParamParseSegment<Segment> extends string\n    ? ParamParseSegment<Segment>\n    : string;\n\n/**\n * The parameters that were parsed from the URL path.\n */\nexport type Params<Key extends string = string> = {\n  readonly [key in Key]: string | undefined;\n};\n\n/**\n * A RouteMatch contains info about how a route matched a URL.\n */\nexport interface RouteMatch<\n  ParamKey extends string = string,\n  RouteObjectType extends RouteObject = RouteObject\n> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The route object that was used to match.\n   */\n  route: RouteObjectType;\n}\n\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/docs/en/v6/api#matchroutes\n */\nexport function matchRoutes<RouteObjectType extends RouteObject = RouteObject>(\n  routes: RouteObjectType[],\n  locationArg: Partial<Location> | string,\n  basename = \"/\"\n): RouteMatch<string, RouteObjectType>[] | null {\n  let location =\n    typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n\n  if (pathname == null) {\n    return null;\n  }\n\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n\n  let matches = null;\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    matches = matchRouteBranch<string, RouteObjectType>(branches[i], pathname);\n  }\n\n  return matches;\n}\n\ninterface RouteMeta<RouteObjectType extends RouteObject = RouteObject> {\n  relativePath: string;\n  caseSensitive: boolean;\n  childrenIndex: number;\n  route: RouteObjectType;\n}\n\ninterface RouteBranch<RouteObjectType extends RouteObject = RouteObject> {\n  path: string;\n  score: number;\n  routesMeta: RouteMeta<RouteObjectType>[];\n}\n\nfunction flattenRoutes<RouteObjectType extends RouteObject = RouteObject>(\n  routes: RouteObjectType[],\n  branches: RouteBranch<RouteObjectType>[] = [],\n  parentsMeta: RouteMeta<RouteObjectType>[] = [],\n  parentPath = \"\"\n): RouteBranch<RouteObjectType>[] {\n  routes.forEach((route, index) => {\n    let meta: RouteMeta<RouteObjectType> = {\n      relativePath: route.path || \"\",\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route,\n    };\n\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(\n        meta.relativePath.startsWith(parentPath),\n        `Absolute route path \"${meta.relativePath}\" nested under path ` +\n          `\"${parentPath}\" is not valid. An absolute child route path ` +\n          `must start with the combined path of all its parent routes.`\n      );\n\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta);\n\n    // Add the children before adding this route to the array so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n    if (route.children && route.children.length > 0) {\n      invariant(\n        route.index !== true,\n        `Index routes must not have child routes. Please remove ` +\n          `all child routes from route path \"${path}\".`\n      );\n\n      flattenRoutes(route.children, branches, routesMeta, path);\n    }\n\n    // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n    if (route.path == null && !route.index) {\n      return;\n    }\n\n    branches.push({ path, score: computeScore(path, route.index), routesMeta });\n  });\n\n  return branches;\n}\n\nfunction rankRouteBranches(branches: RouteBranch[]): void {\n  branches.sort((a, b) =>\n    a.score !== b.score\n      ? b.score - a.score // Higher score first\n      : compareIndexes(\n          a.routesMeta.map((meta) => meta.childrenIndex),\n          b.routesMeta.map((meta) => meta.childrenIndex)\n        )\n  );\n}\n\nconst paramRe = /^:\\w+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\nconst isSplat = (s: string) => s === \"*\";\n\nfunction computeScore(path: string, index: boolean | undefined): number {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n\n  return segments\n    .filter((s) => !isSplat(s))\n    .reduce(\n      (score, segment) =>\n        score +\n        (paramRe.test(segment)\n          ? dynamicSegmentValue\n          : segment === \"\"\n          ? emptySegmentValue\n          : staticSegmentValue),\n      initialScore\n    );\n}\n\nfunction compareIndexes(a: number[], b: number[]): number {\n  let siblings =\n    a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n\n  return siblings\n    ? // If two routes are siblings, we should try to match the earlier sibling\n      // first. This allows people to have fine-grained control over the matching\n      // behavior by simply putting routes with identical paths in the order they\n      // want them tried.\n      a[a.length - 1] - b[b.length - 1]\n    : // Otherwise, it doesn't really make sense to rank non-siblings by index,\n      // so they sort equally.\n      0;\n}\n\nfunction matchRouteBranch<\n  ParamKey extends string = string,\n  RouteObjectType extends RouteObject = RouteObject\n>(\n  branch: RouteBranch<RouteObjectType>,\n  pathname: string\n): RouteMatch<ParamKey, RouteObjectType>[] | null {\n  let { routesMeta } = branch;\n\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches: RouteMatch<ParamKey, RouteObjectType>[] = [];\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname =\n      matchedPathname === \"/\"\n        ? pathname\n        : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath(\n      { path: meta.relativePath, caseSensitive: meta.caseSensitive, end },\n      remainingPathname\n    );\n\n    if (!match) return null;\n\n    Object.assign(matchedParams, match.params);\n\n    let route = meta.route;\n\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams as Params<ParamKey>,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(\n        joinPaths([matchedPathname, match.pathnameBase])\n      ),\n      route,\n    });\n\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n\n  return matches;\n}\n\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/docs/en/v6/api#generatepath\n */\nexport function generatePath(path: string, params: Params = {}): string {\n  return path\n    .replace(/:(\\w+)/g, (_, key) => {\n      invariant(params[key] != null, `Missing \":${key}\" param`);\n      return params[key]!;\n    })\n    .replace(/\\/*\\*$/, (_) =>\n      params[\"*\"] == null ? \"\" : params[\"*\"].replace(/^\\/*/, \"/\")\n    );\n}\n\n/**\n * A PathPattern is used to match on some portion of a URL pathname.\n */\nexport interface PathPattern<Path extends string = string> {\n  /**\n   * A string to match against a URL pathname. May contain `:id`-style segments\n   * to indicate placeholders for dynamic parameters. May also end with `/*` to\n   * indicate matching the rest of the URL pathname.\n   */\n  path: Path;\n  /**\n   * Should be `true` if the static portions of the `path` should be matched in\n   * the same case.\n   */\n  caseSensitive?: boolean;\n  /**\n   * Should be `true` if this pattern should match the entire URL pathname.\n   */\n  end?: boolean;\n}\n\n/**\n * A PathMatch contains info about how a PathPattern matched on a URL pathname.\n */\nexport interface PathMatch<ParamKey extends string = string> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The pattern that was used to match.\n   */\n  pattern: PathPattern;\n}\n\ntype Mutable<T> = {\n  -readonly [P in keyof T]: T[P];\n};\n\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/docs/en/v6/api#matchpath\n */\nexport function matchPath<\n  ParamKey extends ParamParseKey<Path>,\n  Path extends string\n>(\n  pattern: PathPattern<Path> | Path,\n  pathname: string\n): PathMatch<ParamKey> | null {\n  if (typeof pattern === \"string\") {\n    pattern = { path: pattern, caseSensitive: false, end: true };\n  }\n\n  let [matcher, paramNames] = compilePath(\n    pattern.path,\n    pattern.caseSensitive,\n    pattern.end\n  );\n\n  let match = pathname.match(matcher);\n  if (!match) return null;\n\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params: Params = paramNames.reduce<Mutable<Params>>(\n    (memo, paramName, index) => {\n      // We need to compute the pathnameBase here using the raw splat value\n      // instead of using params[\"*\"] later because it will be decoded then\n      if (paramName === \"*\") {\n        let splatValue = captureGroups[index] || \"\";\n        pathnameBase = matchedPathname\n          .slice(0, matchedPathname.length - splatValue.length)\n          .replace(/(.)\\/+$/, \"$1\");\n      }\n\n      memo[paramName] = safelyDecodeURIComponent(\n        captureGroups[index] || \"\",\n        paramName\n      );\n      return memo;\n    },\n    {}\n  );\n\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern,\n  };\n}\n\nfunction compilePath(\n  path: string,\n  caseSensitive = false,\n  end = true\n): [RegExp, string[]] {\n  warning(\n    path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"),\n    `Route path \"${path}\" will be treated as if it were ` +\n      `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n      `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n      `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n  );\n\n  let paramNames: string[] = [];\n  let regexpSource =\n    \"^\" +\n    path\n      .replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n      .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n      .replace(/[\\\\.*+^$?{}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n      .replace(/:(\\w+)/g, (_: string, paramName: string) => {\n        paramNames.push(paramName);\n        return \"([^\\\\/]+)\";\n      });\n\n  if (path.endsWith(\"*\")) {\n    paramNames.push(\"*\");\n    regexpSource +=\n      path === \"*\" || path === \"/*\"\n        ? \"(.*)$\" // Already matched the initial /, just match the rest\n        : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else {\n    regexpSource += end\n      ? \"\\\\/*$\" // When matching to the end, ignore trailing slashes\n      : // Otherwise, match a word boundary or a proceeding /. The word boundary restricts\n        // parent routes to matching only their own words and nothing more, e.g. parent\n        // route \"/home\" should not match \"/home2\".\n        // Additionally, allow paths starting with `.`, `-`, `~`, and url-encoded entities,\n        // but do not consume the character in the matched path so they can match against\n        // nested paths.\n        \"(?:(?=[.~-]|%[0-9A-F]{2})|\\\\b|\\\\/|$)\";\n  }\n\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n\n  return [matcher, paramNames];\n}\n\nfunction safelyDecodeURIComponent(value: string, paramName: string) {\n  try {\n    return decodeURIComponent(value);\n  } catch (error) {\n    warning(\n      false,\n      `The value for the URL param \"${paramName}\" will not be decoded because` +\n        ` the string \"${value}\" is a malformed URL segment. This is probably` +\n        ` due to a bad percent encoding (${error}).`\n    );\n\n    return value;\n  }\n}\n\nexport function stripBasename(\n  pathname: string,\n  basename: string\n): string | null {\n  if (basename === \"/\") return pathname;\n\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  }\n\n  let nextChar = pathname.charAt(basename.length);\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n\n  return pathname.slice(basename.length) || \"/\";\n}\n\nexport function invariant(value: boolean, message?: string): asserts value;\nexport function invariant<T>(\n  value: T | null | undefined,\n  message?: string\n): asserts value is T;\nexport function invariant(value: any, message?: string) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\n\nexport function warning(cond: any, message: string): void {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging React Router!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\nconst alreadyWarned: Record<string, boolean> = {};\nexport function warningOnce(key: string, cond: boolean, message: string) {\n  if (!cond && !alreadyWarned[key]) {\n    alreadyWarned[key] = true;\n    warning(false, message);\n  }\n}\n\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/docs/en/v6/api#resolvepath\n */\nexport function resolvePath(to: To, fromPathname = \"/\"): Path {\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\",\n  } = typeof to === \"string\" ? parsePath(to) : to;\n\n  let pathname = toPathname\n    ? toPathname.startsWith(\"/\")\n      ? toPathname\n      : resolvePathname(toPathname, fromPathname)\n    : fromPathname;\n\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash),\n  };\n}\n\nfunction resolvePathname(relativePath: string, fromPathname: string): string {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n\n  relativeSegments.forEach((segment) => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\n\nexport function resolveTo(\n  toArg: To,\n  routePathnames: string[],\n  locationPathname: string\n): Path {\n  let to = typeof toArg === \"string\" ? parsePath(toArg) : toArg;\n  let toPathname = toArg === \"\" || to.pathname === \"\" ? \"/\" : to.pathname;\n\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n  let from: string;\n  if (toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n\n    if (toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\");\n\n      // Each leading .. segment means \"go up one route\" instead of \"go up one\n      // URL segment\".  This is a key difference from how <a href> works and a\n      // major reason we call this a \"to\" value instead of a \"href\".\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    }\n\n    // If there are more \"..\" segments than parent routes, resolve relative to\n    // the root / URL.\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n\n  let path = resolvePath(to, from);\n\n  // Ensure the pathname has a trailing slash if the original to value had one.\n  if (\n    toPathname &&\n    toPathname !== \"/\" &&\n    toPathname.endsWith(\"/\") &&\n    !path.pathname.endsWith(\"/\")\n  ) {\n    path.pathname += \"/\";\n  }\n\n  return path;\n}\n\nexport function getToPathname(to: To): string | undefined {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || (to as Path).pathname === \"\"\n    ? \"/\"\n    : typeof to === \"string\"\n    ? parsePath(to).pathname\n    : to.pathname;\n}\n\nexport const joinPaths = (paths: string[]): string =>\n  paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n\nexport const normalizePathname = (pathname: string): string =>\n  pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n\nexport const normalizeSearch = (search: string): string =>\n  !search || search === \"?\"\n    ? \"\"\n    : search.startsWith(\"?\")\n    ? search\n    : \"?\" + search;\n\nexport const normalizeHash = (hash: string): string =>\n  !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n","import { History, Location, parsePath, To } from \"./history\";\nimport { Action as HistoryAction, createLocation } from \"./history\";\n\nimport {\n  ActionFormMethod,\n  ActionSubmission,\n  DataRouteObject,\n  FormEncType,\n  FormMethod,\n  invariant,\n  LoaderFormMethod,\n  RouteMatch,\n  RouteObject,\n  Submission,\n} from \"./utils\";\nimport { matchRoutes } from \"./utils\";\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Map of routeId -> data returned from a loader/action/error\n */\nexport interface RouteData {\n  [routeId: string]: any;\n}\n\nexport interface DataRouteMatch extends RouteMatch<string, DataRouteObject> {}\n\n/**\n * A Router instance manages all navigation and data loading/mutations\n */\nexport interface Router {\n  get state(): RouterState;\n  subscribe(fn: RouterSubscriber): () => void;\n  navigate(path: number): Promise<void>;\n  navigate(path: To, opts?: NavigateOptions): Promise<void>;\n  fetch(key: string, href: string, opts?: NavigateOptions): Promise<void>;\n  revalidate(): Promise<void>;\n  createHref(location: Location | URL): string;\n  getFetcher<TData = any>(key?: string): Fetcher<TData>;\n  deleteFetcher(key?: string): void;\n  cleanup(): void;\n  _internalFetchControllers: Map<string, AbortController>;\n}\n\n/**\n * State maintained internally by the router.  During a navigation, all states\n * reflect the the \"old\" location unless otherwise noted.\n */\nexport interface RouterState {\n  /**\n   * The action of the most recent navigation\n   */\n  historyAction: HistoryAction;\n\n  /**\n   * The current location reflected by the router\n   */\n  location: Location;\n\n  /**\n   * The current set of route matches\n   */\n  matches: DataRouteMatch[];\n\n  /**\n   * Tracks whether we've completed our initial data load\n   */\n  initialized: boolean;\n\n  /**\n   * Tracks the state of the current transition\n   */\n  transition: Transition;\n\n  /**\n   * Tracks any in-progress revalidations\n   */\n  revalidation: RevalidationState;\n\n  /**\n   * Data from the loaders for the current matches\n   */\n  loaderData: RouteData;\n\n  /**\n   * Data from the action for the current matches\n   */\n  actionData: RouteData | null;\n\n  /**\n   * Errors caught from loaders for the current matches\n   */\n  errors: RouteData | null;\n\n  /**\n   * Map of current fetchers\n   */\n  fetchers: Map<string, Fetcher>;\n}\n\n/**\n * Data that can be passed into hydrate a Router from SSR\n */\nexport type HydrationState = Partial<\n  Pick<RouterState, \"loaderData\" | \"actionData\" | \"errors\">\n>;\n\n/**\n * Initialization options for createRouter\n */\nexport interface RouterInit {\n  routes: RouteObject[];\n  history: History;\n  hydrationData?: HydrationState;\n}\n\nexport interface RouterSubscriber {\n  (state: RouterState): void;\n}\n\n/**\n * Options for a navigate() call for a Link navigation\n */\ntype LinkNavigateOptions = {\n  replace?: boolean;\n  state?: any;\n};\n\n/**\n * Options for a navigate() call for a Form navigation\n */\ntype SubmissionNavigateOptions = {\n  replace?: boolean;\n  state?: any;\n  formMethod?: FormMethod;\n  formEncType?: FormEncType;\n  formData: FormData;\n};\n\n/**\n * Options to pass to navigate() for either a Link or Form navigation\n */\nexport type NavigateOptions = LinkNavigateOptions | SubmissionNavigateOptions;\n\n/**\n * Potential states for state.transition\n */\nexport type TransitionStates = {\n  Idle: {\n    state: \"idle\";\n    type: \"idle\";\n    location: undefined;\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    type: \"normalLoad\";\n    location: Location;\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n  };\n  LoadingRedirect: {\n    state: \"loading\";\n    type: \"normalRedirect\";\n    location: Location;\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n  };\n  SubmittingLoader: {\n    state: \"submitting\";\n    type: \"loaderSubmission\";\n    location: Location;\n    formMethod: LoaderFormMethod;\n    formAction: string;\n    formEncType: \"application/x-www-form-urlencoded\";\n    formData: FormData;\n  };\n  SubmissionRedirect: {\n    state: \"loading\";\n    type: \"submissionRedirect\";\n    location: Location;\n    formMethod: FormMethod;\n    formAction: string;\n    formEncType: FormEncType;\n    formData: FormData;\n  };\n  SubmittingAction: {\n    state: \"submitting\";\n    type: \"actionSubmission\";\n    location: Location;\n    formMethod: ActionFormMethod;\n    formAction: string;\n    formEncType: FormEncType;\n    formData: FormData;\n  };\n  LoadingAction: {\n    state: \"loading\";\n    type: \"actionReload\";\n    location: Location;\n    formMethod: ActionFormMethod;\n    formAction: string;\n    formEncType: FormEncType;\n    formData: FormData;\n  };\n};\n\nexport type Transition = TransitionStates[keyof TransitionStates];\n\nexport type RevalidationState = \"idle\" | \"loading\";\n\ntype FetcherStates<TData = any> = {\n  Idle: {\n    state: \"idle\";\n    type: \"init\";\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n    data: undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    type: \"normalLoad\";\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n    data: TData | undefined;\n  };\n  SubmittingLoader: {\n    state: \"submitting\";\n    type: \"loaderSubmission\";\n    formMethod: FormMethod;\n    formAction: string;\n    formEncType: \"application/x-www-form-urlencoded\";\n    formData: FormData;\n    data: TData | undefined;\n  };\n  SubmittingAction: {\n    state: \"submitting\";\n    type: \"actionSubmission\";\n    formMethod: ActionFormMethod;\n    formAction: string;\n    formEncType: FormEncType;\n    formData: FormData;\n    data: undefined;\n  };\n  ReloadingAction: {\n    state: \"loading\";\n    type: \"actionReload\";\n    formMethod: ActionFormMethod;\n    formAction: string;\n    formEncType: FormEncType;\n    formData: FormData;\n    data: TData;\n  };\n  SubmissionRedirect: {\n    state: \"loading\";\n    type: \"submissionRedirect\";\n    formMethod: ActionFormMethod;\n    formAction: string;\n    formEncType: FormEncType;\n    formData: FormData;\n    data: undefined;\n  };\n  Revalidating: {\n    state: \"loading\";\n    type: \"revalidate\";\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n    data: TData | undefined;\n  };\n  Done: {\n    state: \"idle\";\n    type: \"done\";\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n    data: TData;\n  };\n};\n\nexport type Fetcher<TData = any> =\n  FetcherStates<TData>[keyof FetcherStates<TData>];\n\nenum ResultType {\n  data = \"data\",\n  redirect = \"redirect\",\n  error = \"error\",\n}\n\n/**\n * Successful result from a loader or action\n */\nexport interface SuccessResult {\n  type: ResultType.data;\n  data: any;\n}\n\n/**\n * Redirect result from a loader or action\n */\nexport interface RedirectResult {\n  type: ResultType.redirect;\n  status: number;\n  location: string;\n  revalidate: boolean;\n}\n\n/**\n * Unsuccessful result from a loader or action\n */\nexport interface ErrorResult {\n  type: ResultType.error;\n  error: any;\n}\n\n/**\n * Result from a loader or action - potentially successful or unsuccessful\n */\nexport type DataResult = SuccessResult | RedirectResult | ErrorResult;\n\ninterface ShortCircuitable {\n  /**\n   * startNavigation does not need to complete the navigation because we\n   * redirected or got interrupted\n   */\n  shortCircuited?: boolean;\n}\n\ninterface HandleActionResult extends ShortCircuitable {\n  /**\n   * Error thrown from the current action, keyed by the route containing the\n   * errorElement to render the error.  To be committed to the state after\n   * loaders have completed\n   */\n  pendingActionError?: RouteData;\n  /**\n   * Data returned from the current action, keyed by the route owning the action.\n   * To be committed to the state after loaders have completed\n   */\n  pendingActionData?: RouteData;\n}\n\ninterface HandleLoadersResult extends ShortCircuitable {\n  /**\n   * loaderData returned from the current set of loaders\n   */\n  loaderData?: RouterState[\"loaderData\"];\n  /**\n   * errors thrown from the current set of loaders\n   */\n  errors?: RouterState[\"errors\"];\n}\n\nexport const IDLE_TRANSITION: TransitionStates[\"Idle\"] = {\n  state: \"idle\",\n  location: undefined,\n  type: \"idle\",\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n};\n\nexport const IDLE_FETCHER: FetcherStates[\"Idle\"] = {\n  state: \"idle\",\n  type: \"init\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n};\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Create a router and listen to history POP navigations\n */\nexport function createRouter(init: RouterInit): Router {\n  invariant(\n    init.routes.length > 0,\n    \"You must provide a non-empty routes array to use Data Routers\"\n  );\n\n  let dataRoutes = convertRoutesToDataRoutes(init.routes);\n  let subscriber: RouterSubscriber | null = null;\n\n  let initialMatches =\n    matchRoutes(dataRoutes, init.history.location) ||\n    getNotFoundMatches(dataRoutes);\n\n  // If we received hydration data without errors - detect if any matched\n  // routes with loaders did not get provided loaderData, and if so launch an\n  // initial data re-load to fetch everything\n  let foundMissingHydrationData =\n    init.hydrationData?.errors == null &&\n    init.hydrationData?.loaderData != null &&\n    initialMatches\n      .filter((m) => m.route.loader)\n      .some((m) => init.hydrationData?.loaderData?.[m.route.id] === undefined);\n\n  if (foundMissingHydrationData) {\n    console.warn(\n      `The provided hydration data did not find loaderData for all matched ` +\n        `routes with loaders.  Performing a full initial data load`\n    );\n  }\n\n  let state: RouterState = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the errorElement to take over\n    matches: initialMatches,\n    initialized: init.hydrationData != null && !foundMissingHydrationData,\n    transition: IDLE_TRANSITION,\n    revalidation: \"idle\",\n    loaderData: foundMissingHydrationData\n      ? {}\n      : init.hydrationData?.loaderData || {},\n    actionData: init.hydrationData?.actionData || null,\n    errors: init.hydrationData?.errors || null,\n    fetchers: new Map(),\n  };\n\n  // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n  let pendingAction: HistoryAction | null = null;\n  // AbortController for the active navigation\n  let pendingNavigationController: AbortController | null;\n  // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n  let isUninterruptedRevalidation = false;\n  // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidate()\n  //  - X-Remix-Revalidate (from redirect)\n  let isRevalidationRequired = false;\n  // AbortControllers for any in-flight fetchers\n  let fetchControllers = new Map();\n  // Track loads based on the order in which they started\n  let incrementingLoadId = 0;\n  // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n  let pendingNavigationLoadId = -1;\n  // Fetchers that triggered data reloads as a result of their actions\n  let fetchReloadIds = new Map<string, number>();\n  // Fetchers that triggered redirect navigations from their actions\n  let fetchRedirectIds = new Set<string>();\n  // Most recent href/match for fetcher.load calls for fetchers\n  let fetchLoadMatches = new Map<string, [string, DataRouteMatch]>();\n\n  // If history informs us of a POP navigation, start the transition but do not update\n  // state.  We'll update our own state once the transition completes\n  init.history.listen(({ action: historyAction, location }) =>\n    startNavigation(historyAction, location)\n  );\n\n  // Kick off initial data load if needed.  Use Pop to avoid modifying history\n  if (!state.initialized) {\n    startNavigation(HistoryAction.Pop, state.location);\n  }\n\n  // Update our state and notify the calling context of the change\n  function updateState(newState: Partial<RouterState>): void {\n    state = {\n      ...state,\n      ...newState,\n    };\n    subscriber?.(state);\n  }\n\n  // Complete a navigation returning the state.transition back to the IDLE_TRANSITION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - HistoryAction and Location are required params\n  // - Transition will always be set to IDLE_TRANSITION\n  // - Can pass any other state in newState\n  function completeNavigation(\n    historyAction: HistoryAction,\n    location: Location,\n    newState: Partial<Omit<RouterState, \"action\" | \"location\" | \"transition\">>\n  ): void {\n    updateState({\n      // Clear existing actionData on any completed navigation beyond the original\n      // action.  Do this prior to spreading in newState in case we've gotten back\n      // to back actions\n      ...(state.actionData != null && state.transition.type !== \"actionReload\"\n        ? { actionData: null }\n        : {}),\n      ...newState,\n      historyAction,\n      location,\n      initialized: true,\n      transition: IDLE_TRANSITION,\n      revalidation: \"idle\",\n      // Always preserve any existing loaderData from re-used routes\n      loaderData: mergeLoaderData(state, newState),\n    });\n\n    if (isUninterruptedRevalidation) {\n      // If this was an uninterrupted revalidation then do not touch history\n    } else if (historyAction === HistoryAction.Pop) {\n      // Do nothing for POP - URL has already been updated\n    } else if (historyAction === HistoryAction.Push) {\n      init.history.push(location, location.state);\n    } else if (historyAction === HistoryAction.Replace) {\n      init.history.replace(location, location.state);\n    }\n\n    // Reset stateful navigation vars\n    pendingAction = null;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n  }\n\n  async function navigate(\n    path: number | To,\n    opts?: NavigateOptions\n  ): Promise<void> {\n    if (typeof path === \"number\") {\n      init.history.go(path);\n      return;\n    }\n\n    let location = createLocation(state.location, path, opts?.state);\n    let historyAction = opts?.replace\n      ? HistoryAction.Replace\n      : HistoryAction.Push;\n\n    if (isSubmissionNavigation(opts)) {\n      return await startNavigation(historyAction, location, {\n        submission: {\n          formMethod: opts.formMethod || \"get\",\n          formAction: createHref(location),\n          formEncType: opts?.formEncType || \"application/x-www-form-urlencoded\",\n          formData: opts.formData,\n        },\n      });\n    }\n\n    return await startNavigation(historyAction, location);\n  }\n\n  async function revalidate(): Promise<void> {\n    let { state: transitionState, type } = state.transition;\n\n    // Toggle isRevalidationRequired so the next data load will call all loaders,\n    // and mark us in a revalidating state\n    isRevalidationRequired = true;\n    updateState({ revalidation: \"loading\" });\n\n    // If we're currently submitting an action, we don't need to start a new\n    // transition, we'll just let the follow up loader execution call all loaders\n    if (transitionState === \"submitting\" && type === \"actionSubmission\") {\n      return;\n    }\n\n    // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n    if (state.transition.state === \"idle\") {\n      return await startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true,\n      });\n    }\n\n    // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the transition.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n    return await startNavigation(\n      pendingAction || state.historyAction,\n      state.transition.location,\n      { overrideTransition: state.transition }\n    );\n  }\n\n  // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideTransition which will override the normalLoad in the case of a redirect\n  // navigation\n  async function startNavigation(\n    historyAction: HistoryAction,\n    location: Location,\n    opts?: {\n      submission?: Submission;\n      overrideTransition?: Transition;\n      startUninterruptedRevalidation?: boolean;\n    }\n  ): Promise<void> {\n    // Abort any in-progress navigations and start a new one\n    pendingNavigationController?.abort();\n    pendingAction = historyAction;\n\n    // Unset any ongoing uninterrupted revalidations (unless told otherwise),\n    // since we want this new navigation to update history normally\n    isUninterruptedRevalidation = opts?.startUninterruptedRevalidation === true;\n\n    let loadingTransition = opts?.overrideTransition;\n    let matches = matchRoutes(dataRoutes, location);\n\n    // Short circuit with a 404 on the root error boundary if we match nothing\n    if (!matches) {\n      completeNavigation(historyAction, location, {\n        matches: getNotFoundMatches(dataRoutes),\n        errors: {\n          [dataRoutes[0].id]: new Response(null, { status: 404 }),\n        },\n      });\n      return;\n    }\n\n    // Short circuit if it's only a hash change\n    if (isHashChangeOnly(state.location, location)) {\n      completeNavigation(historyAction, location, {\n        matches,\n      });\n      return;\n    }\n\n    // Call action if we received an action submission\n    let pendingActionData: RouteData | null = null;\n    let pendingActionError: RouteData | null = null;\n\n    if (opts?.submission && isActionSubmission(opts.submission)) {\n      let actionOutput = await handleAction(\n        historyAction,\n        location,\n        opts.submission,\n        matches\n      );\n\n      if (actionOutput.shortCircuited) {\n        return;\n      }\n\n      pendingActionData = actionOutput.pendingActionData || null;\n      pendingActionError = actionOutput.pendingActionError || null;\n      loadingTransition = {\n        state: \"loading\",\n        type: \"actionReload\",\n        location,\n        ...opts.submission,\n      } as TransitionStates[\"LoadingAction\"];\n    }\n\n    // Call loaders\n    let { shortCircuited, loaderData, errors } = await handleLoaders(\n      historyAction,\n      location,\n      opts?.submission,\n      matches,\n      loadingTransition,\n      pendingActionData,\n      pendingActionError\n    );\n\n    if (shortCircuited) {\n      return;\n    }\n\n    completeNavigation(historyAction, location, {\n      matches,\n      loaderData,\n      errors,\n    });\n  }\n\n  async function handleAction(\n    historyAction: HistoryAction,\n    location: Location,\n    submission: ActionSubmission,\n    matches: DataRouteMatch[]\n  ): Promise<HandleActionResult> {\n    isRevalidationRequired = true;\n\n    if (\n      matches[matches.length - 1].route.index &&\n      !hasNakedIndexQuery(location.search)\n    ) {\n      // Note: OK to mutate this in-place since it's a scoped var inside\n      // handleAction and mutation will not impact the startNavigation matches\n      // variable that we use for revalidation\n      matches = matches.slice(0, -1);\n    }\n\n    // Put us in a submitting state\n    let { formMethod, formAction, formEncType, formData } = submission;\n    let transition: TransitionStates[\"SubmittingAction\"] = {\n      state: \"submitting\",\n      type: \"actionSubmission\",\n      location,\n      formMethod,\n      formAction,\n      formEncType,\n      formData,\n    };\n    updateState({ transition });\n\n    // Call our action and get the result\n    let result: DataResult;\n\n    let actionMatch = matches.slice(-1)[0];\n    if (!actionMatch.route.action) {\n      if (__DEV__) {\n        console.warn(\n          \"You're trying to submit to a route that does not have an action.  To \" +\n            \"fix this, please add an `action` function to the route for \" +\n            `[${createHref(location)}]`\n        );\n      }\n      result = {\n        type: ResultType.error,\n        error: new Response(null, { status: 405 }),\n      };\n    } else {\n      // Create a controller for this data load\n      let actionAbortController = new AbortController();\n      pendingNavigationController = actionAbortController;\n\n      result = await callLoaderOrAction(\n        actionMatch,\n        location,\n        actionAbortController.signal,\n        submission\n      );\n\n      if (actionAbortController.signal.aborted) {\n        return { shortCircuited: true };\n      }\n\n      // Clean up now that the loaders have completed.  We do do not clean up if\n      // we short circuited because pendingNavigationController will have already\n      // been assigned to a new controller for the next navigation\n      pendingNavigationController = null;\n    }\n\n    // If the action threw a redirect Response, start a new REPLACE navigation\n    if (isRedirectResult(result)) {\n      let redirectTransition: TransitionStates[\"SubmissionRedirect\"] = {\n        state: \"loading\",\n        type: \"submissionRedirect\",\n        location: createLocation(state.location, result.location),\n        ...submission,\n      };\n      await startRedirectNavigation(result, redirectTransition);\n      return { shortCircuited: true };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      return {\n        pendingActionError: { [boundaryMatch.route.id]: result.error },\n      };\n    }\n\n    return {\n      pendingActionData: { [actionMatch.route.id]: result.data },\n    };\n  }\n\n  async function handleLoaders(\n    historyAction: HistoryAction,\n    location: Location,\n    submission: Submission | undefined,\n    matches: DataRouteMatch[],\n    overrideTransition: Transition | undefined,\n    pendingActionData: RouteData | null,\n    pendingActionError: RouteData | null\n  ): Promise<HandleLoadersResult> {\n    // Figure out the right transition we want to use for data loading\n    let loadingTransition;\n\n    if (overrideTransition) {\n      loadingTransition = overrideTransition;\n    } else if (submission?.formMethod === \"get\") {\n      loadingTransition = {\n        state: \"submitting\",\n        type: \"loaderSubmission\",\n        location,\n        ...submission,\n      } as TransitionStates[\"SubmittingLoader\"];\n    } else {\n      loadingTransition = {\n        state: \"loading\",\n        type: \"normalLoad\",\n        location,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n      } as TransitionStates[\"Loading\"];\n    }\n\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      state,\n      matches,\n      // Pass the current transition if this is an uninterrupted revalidation,\n      // since we aren't actually \"navigating\".  Otherwise pass the transition\n      // we're about to commit\n      isUninterruptedRevalidation ? state.transition : loadingTransition,\n      location,\n      isRevalidationRequired,\n      pendingActionData,\n      pendingActionError,\n      fetchLoadMatches\n    );\n\n    // Short circuit if we have no loaders to run\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      completeNavigation(historyAction, location, {\n        matches,\n        // Commit pending action error if we're short circuiting\n        errors: pendingActionError || null,\n        actionData: pendingActionData || null,\n      });\n      return { shortCircuited: true };\n    }\n\n    // If this is an uninterrupted revalidation, remain in our current idle state.\n    // Otherwise, transition to our loading state and load data, preserving any\n    // new action data or existing action data (in the case of a revalidation\n    // interrupting an actionReload)\n    if (!isUninterruptedRevalidation) {\n      revalidatingFetchers.forEach(([key]) => {\n        let revalidatingFetcher: FetcherStates[\"Revalidating\"] = {\n          state: \"loading\",\n          type: \"revalidate\",\n          data: state.fetchers.get(key)?.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined,\n        };\n        state.fetchers.set(key, revalidatingFetcher);\n      });\n      updateState({\n        transition: loadingTransition,\n        actionData: pendingActionData || state.actionData || null,\n        ...(revalidatingFetchers.length > 0\n          ? { fetchers: new Map(state.fetchers) }\n          : {}),\n      });\n    }\n\n    // Start the data load\n    let abortController = new AbortController();\n    pendingNavigationController = abortController;\n    pendingNavigationLoadId = ++incrementingLoadId;\n    revalidatingFetchers.forEach(([key]) =>\n      fetchControllers.set(key, abortController)\n    );\n\n    // Call all navigation loaders and revalidating fetcher loaders in parallel,\n    // then slice off the results into separate arrays so we can handle them\n    // accordingly\n    let results = await Promise.all([\n      ...matchesToLoad.map((m) =>\n        callLoaderOrAction(m, location, abortController.signal)\n      ),\n      ...revalidatingFetchers.map(([, href, match]) =>\n        callLoaderOrAction(match, href, abortController.signal)\n      ),\n    ]);\n    let navigationResults = results.slice(0, matchesToLoad.length);\n    let fetcherResults = results.slice(matchesToLoad.length);\n\n    if (abortController.signal.aborted) {\n      return { shortCircuited: true };\n    }\n\n    // Clean up now that the loaders have completed.  We do do not clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n    pendingNavigationController = null;\n    revalidatingFetchers.forEach((key) => fetchControllers.delete(key));\n\n    // If any loaders returned a redirect Response, start a new REPLACE navigation\n    let redirect = findRedirect(results);\n    if (redirect) {\n      let redirectTransition = getLoaderRedirect(state, redirect);\n      await startRedirectNavigation(redirect, redirectTransition);\n      return { shortCircuited: true };\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      matches,\n      matchesToLoad,\n      navigationResults,\n      pendingActionError,\n      revalidatingFetchers,\n      fetcherResults\n    );\n\n    markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n\n    return {\n      loaderData,\n      errors,\n      ...(didAbortFetchLoads || revalidatingFetchers.length > 0\n        ? { fetchers: new Map(state.fetchers) }\n        : {}),\n    };\n  }\n\n  function getFetcher<TData = any>(key: string): Fetcher<TData> {\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  }\n\n  async function fetch(key: string, href: string, opts?: NavigateOptions) {\n    if (typeof AbortController === \"undefined\") {\n      throw new Error(\n        \"router.fetch() was called during the server render, but it shouldn't be. \" +\n          \"You are likely calling a useFetcher() method in the body of your component. \" +\n          \"Try moving it to a useEffect or a callback.\"\n      );\n    }\n\n    let matches = matchRoutes(dataRoutes, href);\n    invariant(matches, `No matches found for fetch url: ${href}`);\n\n    if (fetchControllers.has(key)) abortFetcher(key);\n\n    let match =\n      matches[matches.length - 1].route.index &&\n      !hasNakedIndexQuery(parsePath(href).search || \"\")\n        ? matches.slice(-2)[0]\n        : matches.slice(-1)[0];\n\n    if (isSubmissionNavigation(opts)) {\n      let submission: Submission = {\n        formMethod: opts.formMethod || \"get\",\n        formAction: href,\n        formEncType: opts.formEncType || \"application/x-www-form-urlencoded\",\n        formData: opts.formData,\n      };\n      if (isActionSubmission(submission)) {\n        await handleFetcherAction(key, href, match, submission);\n      } else {\n        let loadingFetcher: FetcherStates[\"SubmittingLoader\"] = {\n          state: \"submitting\",\n          type: \"loaderSubmission\",\n          ...submission,\n          data: state.fetchers.get(key)?.data || undefined,\n        };\n\n        await handleFetcherLoader(key, href, match, loadingFetcher);\n      }\n    } else {\n      let loadingFetcher: FetcherStates[\"Loading\"] = {\n        state: \"loading\",\n        type: \"normalLoad\",\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n        data: state.fetchers.get(key)?.data || undefined,\n      };\n\n      await handleFetcherLoader(key, href, match, loadingFetcher);\n    }\n  }\n\n  async function handleFetcherAction(\n    key: string,\n    href: string,\n    match: DataRouteMatch,\n    submission: ActionSubmission\n  ) {\n    isRevalidationRequired = true;\n    fetchLoadMatches.delete(key);\n\n    // Put this fetcher into it's submitting state\n    let fetcher: FetcherStates[\"SubmittingAction\"] = {\n      state: \"submitting\",\n      type: \"actionSubmission\",\n      ...submission,\n      data: state.fetchers.get(key)?.data || undefined,\n    };\n    state.fetchers.set(key, fetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    // Call the action for the fetcher\n    let abortController = new AbortController();\n    fetchControllers.set(key, abortController);\n\n    let actionResult = await callLoaderOrAction(\n      match,\n      href,\n      abortController.signal,\n      submission\n    );\n\n    if (abortController.signal.aborted) {\n      return;\n    }\n\n    if (isRedirectResult(actionResult)) {\n      fetchRedirectIds.add(key);\n      let loadingFetcher: FetcherStates[\"SubmissionRedirect\"] = {\n        state: \"loading\",\n        type: \"submissionRedirect\",\n        ...submission,\n        data: undefined,\n      };\n      state.fetchers.set(key, loadingFetcher);\n      updateState({ fetchers: new Map(state.fetchers) });\n\n      let redirectTransition: TransitionStates[\"SubmissionRedirect\"] = {\n        state: \"loading\",\n        type: \"submissionRedirect\",\n        location: createLocation(state.location, actionResult.location),\n        ...submission,\n      };\n      await startRedirectNavigation(actionResult, redirectTransition);\n      return;\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(actionResult)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match.route.id);\n      state.fetchers.delete(key);\n      updateState({\n        fetchers: new Map(state.fetchers),\n        errors: {\n          [boundaryMatch.route.id]: actionResult.error,\n        },\n      });\n      return;\n    }\n\n    // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n    let nextLocation = state.transition.location || state.location;\n    let matches =\n      state.transition.type !== \"idle\"\n        ? matchRoutes(dataRoutes, state.transition.location)\n        : state.matches;\n\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n\n    let loadFetcher: FetcherStates[\"ReloadingAction\"] = {\n      state: \"loading\",\n      type: \"actionReload\",\n      data: actionResult.data,\n      ...submission,\n    };\n    state.fetchers.set(key, loadFetcher);\n\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      state,\n      matches,\n      state.transition,\n      nextLocation,\n      isRevalidationRequired,\n      null,\n      null,\n      fetchLoadMatches\n    );\n\n    // Put all revalidating fetchers into the revalidating state, except for the\n    // current fetcher which we want to keep in the actionReload state\n    revalidatingFetchers\n      .filter(([staleKey]) => staleKey !== key)\n      .forEach(([staleKey]) => {\n        let revalidatingFetcher: FetcherStates[\"Revalidating\"] = {\n          state: \"loading\",\n          type: \"revalidate\",\n          data: state.fetchers.get(key)?.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined,\n        };\n        state.fetchers.set(staleKey, revalidatingFetcher);\n        fetchControllers.set(staleKey, abortController);\n      });\n\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    // Call all navigation loaders and revalidating fetcher loaders in parallel,\n    // then slice off the results into separate arrays so we can handle them\n    // accordingly\n    let results = await Promise.all([\n      ...matchesToLoad.map((m) =>\n        callLoaderOrAction(m, nextLocation, abortController.signal)\n      ),\n      ...revalidatingFetchers.map(([, href, match]) =>\n        callLoaderOrAction(match, href, abortController.signal)\n      ),\n    ]);\n    let loaderResults = results.slice(0, matchesToLoad.length);\n    let fetcherResults = results.slice(matchesToLoad.length);\n\n    if (abortController.signal.aborted) {\n      return;\n    }\n\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach((staleKey) =>\n      fetchControllers.delete(staleKey)\n    );\n\n    let loaderRedirect = findRedirect(loaderResults);\n    if (loaderRedirect) {\n      let redirectTransition = getLoaderRedirect(state, loaderRedirect);\n      await startRedirectNavigation(loaderRedirect, redirectTransition);\n      return;\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      state.matches,\n      matchesToLoad,\n      loaderResults,\n      null,\n      revalidatingFetchers,\n      fetcherResults\n    );\n\n    let doneFetcher: FetcherStates[\"Done\"] = {\n      state: \"idle\",\n      type: \"done\",\n      data: actionResult.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n    };\n    state.fetchers.set(key, doneFetcher);\n\n    let didAbortFetchLoads = abortStaleFetchLoads(loadId);\n\n    // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n    if (\n      state.transition.state === \"loading\" &&\n      loadId > pendingNavigationLoadId\n    ) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController?.abort();\n\n      completeNavigation(pendingAction, state.transition.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers),\n      });\n    } else {\n      // otherwise just update with the fetcher data\n      updateState({\n        errors,\n        loaderData,\n        ...(didAbortFetchLoads ? { fetchers: new Map(state.fetchers) } : {}),\n      });\n      isRevalidationRequired = false;\n    }\n  }\n\n  async function handleFetcherLoader(\n    key: string,\n    href: string,\n    match: DataRouteMatch,\n    loadingFetcher: Fetcher\n  ) {\n    // Put this fetcher into it's loading state\n    state.fetchers.set(key, loadingFetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    // Store off the match so we can call it's shouldRevalidate\n    fetchLoadMatches.set(key, [href, match]);\n\n    // Call the loader for this fetcher route match\n    let abortController = new AbortController();\n    fetchControllers.set(key, abortController);\n    let result: DataResult = await callLoaderOrAction(\n      match,\n      href,\n      abortController.signal\n    );\n\n    if (abortController.signal.aborted) return;\n    fetchControllers.delete(key);\n\n    // If the loader threw a redirect Response, start a new REPLACE navigation\n    if (isRedirectResult(result)) {\n      let redirectTransition = getLoaderRedirect(state, result);\n      await startRedirectNavigation(result, redirectTransition);\n      return;\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match.route.id);\n      state.fetchers.delete(key);\n      // TODO: In remix, this would reset to IDLE_TRANSITION if it was a catch -\n      // do we need to behave any differently with our non-redirect errors?\n      // What if it was a non-redirect Response?\n      updateState({\n        fetchers: new Map(state.fetchers),\n        errors: {\n          [boundaryMatch.route.id]: result.error,\n        },\n      });\n      return;\n    }\n\n    // Mark the fetcher as done\n    let doneFetcher: FetcherStates[\"Done\"] = {\n      state: \"idle\",\n      type: \"done\",\n      data: result.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n    };\n    state.fetchers.set(key, doneFetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n  }\n\n  async function startRedirectNavigation(\n    redirect: RedirectResult,\n    transition: Transition\n  ) {\n    if (redirect.revalidate) {\n      isRevalidationRequired = true;\n    }\n    invariant(\n      transition.location,\n      \"Expected a location on the redirect transition\"\n    );\n    await startNavigation(HistoryAction.Replace, transition.location, {\n      overrideTransition: transition,\n    });\n  }\n\n  function deleteFetcher(key: string): void {\n    if (fetchControllers.has(key)) abortFetcher(key);\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    state.fetchers.delete(key);\n  }\n\n  function abortFetcher(key: string) {\n    let controller = fetchControllers.get(key);\n    invariant(controller, `Expected fetch controller: ${key}`);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n\n  function markFetchersDone(keys: string[]) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher: FetcherStates[\"Done\"] = {\n        state: \"idle\",\n        type: \"done\",\n        data: fetcher.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  function markFetchRedirectsDone(): void {\n    let doneKeys = [];\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, `Expected fetcher: ${key}`);\n      if (fetcher.type === \"submissionRedirect\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n      }\n    }\n    markFetchersDone(doneKeys);\n  }\n\n  function abortStaleFetchLoads(landedId: number): boolean {\n    let yeetedKeys = [];\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, `Expected fetcher: ${key}`);\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n\n  let router: Router = {\n    get state() {\n      return state;\n    },\n    subscribe(fn: RouterSubscriber) {\n      if (subscriber) {\n        throw new Error(\"A router only accepts one active subscriber\");\n      }\n      subscriber = fn;\n      return () => {\n        subscriber = null;\n      };\n    },\n    cleanup() {\n      subscriber = null;\n      pendingNavigationController?.abort();\n      for (let [, controller] of fetchControllers) {\n        controller.abort();\n      }\n    },\n    navigate,\n    fetch,\n    revalidate,\n    createHref,\n    getFetcher,\n    deleteFetcher,\n    _internalFetchControllers: fetchControllers,\n  };\n\n  return router;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n\nfunction convertRoutesToDataRoutes(\n  routes: RouteObject[],\n  parentPath: number[] = [],\n  allIds: Set<string> = new Set<string>()\n): DataRouteObject[] {\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, index];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(\n      !allIds.has(id),\n      `Found a route id collision on id \"${id}\".  Route ` +\n        \"id's must be globally unique within Data Router usages\"\n    );\n    allIds.add(id);\n    let dataRoute: DataRouteObject = {\n      ...route,\n      id,\n      children: route.children\n        ? convertRoutesToDataRoutes(route.children, treePath, allIds)\n        : undefined,\n    };\n    return dataRoute;\n  });\n}\n\nfunction getLoaderRedirect(\n  state: RouterState,\n  redirect: RedirectResult\n): Transition {\n  let redirectLocation = createLocation(state.location, redirect.location);\n  if (\n    state.transition.type === \"loaderSubmission\" ||\n    state.transition.type === \"actionReload\"\n  ) {\n    let { formMethod, formAction, formEncType, formData } = state.transition;\n    let transition: TransitionStates[\"SubmissionRedirect\"] = {\n      state: \"loading\",\n      type: \"submissionRedirect\",\n      location: redirectLocation,\n      formMethod,\n      formAction,\n      formEncType,\n      formData,\n    };\n    return transition;\n  } else {\n    let transition: TransitionStates[\"LoadingRedirect\"] = {\n      state: \"loading\",\n      type: \"normalRedirect\",\n      location: redirectLocation,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n    };\n    return transition;\n  }\n}\n\nfunction getMatchesToLoad(\n  state: RouterState,\n  matches: DataRouteMatch[],\n  transition: Transition,\n  location: Location,\n  isRevalidationRequired: boolean,\n  pendingActionData: RouteData | null,\n  pendingActionError: RouteData | null,\n  revalidatingFetcherMatches: Map<string, [string, DataRouteMatch]>\n): [DataRouteMatch[], [string, string, DataRouteMatch][]] {\n  // Determine which routes to run loaders for, filter out all routes below\n  // any caught action error as they aren't going to render so we don't\n  // need to load them\n  let deepestRenderableMatchIndex = pendingActionError\n    ? matches.findIndex(\n        (m) => m.route.id === Object.keys(pendingActionError)[0]\n      )\n    : matches.length;\n\n  let actionResult = pendingActionError\n    ? Object.values(pendingActionError)[0]\n    : pendingActionData\n    ? Object.values(pendingActionData)[0]\n    : null;\n\n  // Pick navigation matches that are net-new or qualify for revalidation\n  let navigationMatches = matches.filter((match, index) => {\n    if (!match.route.loader || index >= deepestRenderableMatchIndex) {\n      return false;\n    }\n    return (\n      isNewLoader(state.loaderData, state.matches[index], match) ||\n      shouldRevalidateLoader(\n        state.location,\n        state.matches[index],\n        transition,\n        location,\n        match,\n        isRevalidationRequired,\n        actionResult\n      )\n    );\n  });\n\n  // If revalidation is required, pick fetchers that qualify\n  let revalidatingFetchers: [string, string, DataRouteMatch][] = [];\n  if (isRevalidationRequired) {\n    for (let entry of revalidatingFetcherMatches.entries()) {\n      let [key, [href, match]] = entry;\n      let shouldRevalidate = shouldRevalidateLoader(\n        href,\n        match,\n        transition,\n        href,\n        match,\n        isRevalidationRequired,\n        actionResult\n      );\n      if (shouldRevalidate) {\n        revalidatingFetchers.push([key, href, match]);\n      }\n    }\n  }\n\n  return [navigationMatches, revalidatingFetchers];\n}\n\nfunction isNewLoader(\n  currentLoaderData: RouteData,\n  currentMatch: DataRouteMatch,\n  match: DataRouteMatch\n) {\n  let isNew =\n    // [a] -> [a, b]\n    !currentMatch ||\n    // [a, b] -> [a, c]\n    match.route.id !== currentMatch.route.id;\n\n  // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error\n  let isMissingData = currentLoaderData[match.route.id] === undefined;\n\n  // Always load if this is a net-new route or we don't yet have data\n  return isNew || isMissingData;\n}\n\nfunction shouldRevalidateLoader(\n  currentLocation: string | Location,\n  currentMatch: DataRouteMatch,\n  transition: Transition,\n  location: string | Location,\n  match: DataRouteMatch,\n  isRevalidationRequired: boolean,\n  actionResult: DataResult | null\n) {\n  let currentUrl = createURL(currentLocation);\n  let currentParams = currentMatch.params;\n  let nextUrl = createURL(location);\n  let nextParams = match.params;\n\n  // This is the default implementation as to when we revalidate.  If the route\n  // provides it's own implementation, then we give them full control but\n  // provide this value so they can leverage it if needed after they check\n  // their own specific use cases\n  // Note that fetchers always provide the same current/next locations so the\n  // URL-based checks here don't apply to fetcher shouldRevalidate calls\n  let defaultShouldRevalidate =\n    // param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname ||\n    // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    (currentMatch.route.path?.endsWith(\"*\") &&\n      currentMatch.params[\"*\"] !== match.params[\"*\"]) ||\n    // Clicked the same link, resubmitted a GET form\n    currentUrl.toString() === nextUrl.toString() ||\n    // Search params affect all loaders\n    currentUrl.search !== nextUrl.search ||\n    // Forced revalidation due to submission, useRevalidate, or X-Remix-Revalidate\n    isRevalidationRequired;\n\n  if (match.route.shouldRevalidate) {\n    return match.route.shouldRevalidate({\n      currentUrl,\n      currentParams,\n      nextUrl,\n      nextParams,\n      transition,\n      actionResult,\n      defaultShouldRevalidate,\n    });\n  }\n\n  return defaultShouldRevalidate;\n}\n\nasync function callLoaderOrAction(\n  match: DataRouteMatch,\n  location: string | Location,\n  signal: AbortSignal,\n  actionSubmission?: ActionSubmission\n): Promise<DataResult> {\n  let resultType = ResultType.data;\n  let result;\n\n  try {\n    let type: \"action\" | \"loader\" = actionSubmission ? \"action\" : \"loader\";\n    let handler = match.route[type];\n    invariant<Function>(\n      handler,\n      `Could not find the ${type} to run on the \"${match.route.id}\" route`\n    );\n\n    result = await handler({\n      params: match.params,\n      request: createRequest(location, actionSubmission),\n      signal,\n    });\n  } catch (e) {\n    resultType = ResultType.error;\n    result = e;\n  }\n\n  if (result instanceof Response) {\n    // Process redirects\n    let status = result.status;\n    let location = result.headers.get(\"Location\");\n    if (status >= 300 && status <= 399 && location != null) {\n      return {\n        type: ResultType.redirect,\n        status,\n        location,\n        revalidate: result.headers.get(\"X-Remix-Revalidate\") !== null,\n      };\n    }\n\n    // Automatically unwrap non-redirect success responses\n    if (resultType === ResultType.data) {\n      let contentType = result.headers.get(\"Content-Type\");\n      if (contentType?.startsWith(\"application/json\")) {\n        result = await result.json();\n      } else {\n        result = await result.text();\n      }\n    }\n  }\n\n  if (resultType === ResultType.error) {\n    return { type: resultType, error: result };\n  }\n\n  return { type: resultType, data: result };\n}\n\nfunction createRequest(\n  location: string | Location,\n  actionSubmission?: ActionSubmission\n): Request {\n  let init: RequestInit | undefined = undefined;\n\n  if (actionSubmission) {\n    let { formMethod, formEncType, formData } = actionSubmission;\n    let body = formData;\n\n    // If we're submitting application/x-www-form-urlencoded, then body should\n    // be of type URLSearchParams\n    if (formEncType === \"application/x-www-form-urlencoded\") {\n      body = new URLSearchParams();\n\n      for (let [key, value] of formData.entries()) {\n        invariant(\n          typeof value === \"string\",\n          'File inputs are not supported with encType \"application/x-www-form-urlencoded\", ' +\n            'please use \"multipart/form-data\" instead.'\n        );\n        body.append(key, value);\n      }\n    }\n\n    init = {\n      method: formMethod.toUpperCase(),\n      headers: {\n        \"Content-Type\": formEncType,\n      },\n      body,\n    };\n  }\n\n  let url = createURL(location).toString();\n  return new Request(url, init);\n}\n\nfunction processLoaderData(\n  state: RouterState,\n  matches: DataRouteMatch[],\n  matchesToLoad: DataRouteMatch[],\n  results: DataResult[],\n  pendingActionError: RouteData | null,\n  revalidatingFetchers: [string, string, DataRouteMatch][],\n  fetcherResults: DataResult[]\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors: RouterState[\"errors\"];\n} {\n  // Fill in loaderData/errors from our loaders\n  let loaderData: RouterState[\"loaderData\"] = {};\n  let errors: RouterState[\"errors\"] = null;\n\n  // Process loader results into state.loaderData/state.errors\n  results.forEach((result, index) => {\n    let id = matchesToLoad[index].route.id;\n    invariant(\n      !isRedirectResult(result),\n      \"Cannot handle redirect results in processLoaderData\"\n    );\n    if (isErrorResult(result)) {\n      // Look upwards from the matched route for the closest ancestor\n      // errorElement, defaulting to the root match\n      let boundaryMatch = findNearestBoundary(matches, id);\n      let error = result.error;\n      // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n      if (pendingActionError) {\n        error = Object.values(pendingActionError)[0];\n        pendingActionError = null;\n      }\n      errors = Object.assign(errors || {}, {\n        [boundaryMatch.route.id]: error,\n      });\n    } else {\n      loaderData[id] = result.data;\n    }\n  });\n\n  // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here\n  if (pendingActionError) {\n    errors = pendingActionError;\n  }\n\n  // Process results from our revalidating fetchers\n  revalidatingFetchers.forEach(([key, href, match], index) => {\n    let result = fetcherResults[index];\n\n    // Process fetcher non-redirect errors\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match.route.id);\n      if (!errors?.[boundaryMatch.route.id]) {\n        errors = {\n          ...errors,\n          [boundaryMatch.route.id]: result.error,\n        };\n      }\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      invariant(false, \"Unhandled fetcher revalidation redirect\");\n    } else {\n      let doneFetcher: FetcherStates[\"Done\"] = {\n        state: \"idle\",\n        type: \"done\",\n        data: result.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  });\n\n  return { loaderData, errors };\n}\n\nfunction mergeLoaderData(\n  state: RouterState,\n  newState: Partial<RouterState>\n): RouteData {\n  // Identify active routes that have current loaderData and didn't receive new\n  // loaderData\n  let reusedRoutesWithData = (newState.matches || state.matches).filter(\n    (match) =>\n      state.loaderData[match.route.id] !== undefined &&\n      newState.loaderData?.[match.route.id] === undefined\n  );\n  return {\n    ...newState.loaderData,\n    ...reusedRoutesWithData.reduce(\n      (acc, match) =>\n        Object.assign(acc, {\n          [match.route.id]: state.loaderData[match.route.id],\n        }),\n      {}\n    ),\n  };\n}\n\n// Find the nearest error boundary, looking upwards from the matched route\n// for the closest ancestor errorElement, defaulting to the root match\nfunction findNearestBoundary(\n  matches: DataRouteMatch[],\n  routeId: string\n): DataRouteMatch {\n  return (\n    matches\n      .slice(0, matches.findIndex((m) => m.route.id === routeId) + 1)\n      .reverse()\n      .find((m) => m.route.errorElement) || matches[0]\n  );\n}\n\nfunction getNotFoundMatches(routes: DataRouteObject[]): DataRouteMatch[] {\n  return [\n    {\n      params: {},\n      pathname: \"\",\n      pathnameBase: \"\",\n      route: routes[0],\n    },\n  ];\n}\n\n// Find any returned redirect errors, starting from the lowest match\nfunction findRedirect(results: DataResult[]): RedirectResult | undefined {\n  for (let i = results.length - 1; i >= 0; i--) {\n    let result = results[i];\n    if (isRedirectResult(result)) {\n      return result;\n    }\n  }\n}\n\n// Create an href to represent a \"server\" URL without the hash\nfunction createHref(location: Location | URL) {\n  return location.pathname + location.search;\n}\n\nfunction isHashChangeOnly(a: Location, b: Location): boolean {\n  return (\n    a.pathname === b.pathname && a.search === b.search && a.hash !== b.hash\n  );\n}\n\nfunction isErrorResult(result: DataResult): result is ErrorResult {\n  return result.type === ResultType.error;\n}\n\nfunction isRedirectResult(result?: DataResult): result is RedirectResult {\n  return result?.type === ResultType.redirect;\n}\n\nfunction isSubmissionNavigation(\n  opts?: NavigateOptions\n): opts is SubmissionNavigateOptions {\n  return opts != null && \"formData\" in opts && opts.formData != null;\n}\n\nfunction isActionSubmission(\n  submission: Submission\n): submission is ActionSubmission {\n  return submission && submission.formMethod !== \"get\";\n}\n\nfunction hasNakedIndexQuery(search: string): boolean {\n  return new URLSearchParams(search).getAll(\"index\").some((v) => v === \"\");\n}\n\nfunction createURL(location: Location | string): URL {\n  let base =\n    typeof window !== \"undefined\" && typeof window.location !== \"undefined\"\n      ? window.location.origin\n      : \"unknown://unknown\";\n  let href = typeof location === \"string\" ? location : createHref(location);\n  return new URL(href, base);\n}\n\n//#endregion\n","import type {\n  BrowserHistory,\n  BrowserHistoryOptions,\n  HashHistory,\n  HashHistoryOptions,\n  History,\n  InitialEntry,\n  Location,\n  MemoryHistory,\n  MemoryHistoryOptions,\n  Path,\n  To,\n} from \"./history\";\nimport {\n  Action,\n  createBrowserHistory,\n  createHashHistory,\n  createMemoryHistory,\n  createPath,\n  parsePath,\n} from \"./history\";\nimport type {\n  DataRouteMatch,\n  Fetcher,\n  HydrationState,\n  NavigateOptions,\n  Transition,\n  Router,\n  RouterState,\n  RouteData,\n  RouterInit,\n} from \"./router\";\nimport { IDLE_TRANSITION, createRouter } from \"./router\";\nimport type {\n  ActionFunctionArgs,\n  DataRouteObject,\n  FormEncType,\n  FormMethod,\n  LoaderFunctionArgs,\n  ParamParseKey,\n  Params,\n  PathMatch,\n  PathPattern,\n  RouteMatch,\n  RouteObject,\n  Submission,\n} from \"./utils\";\nimport {\n  generatePath,\n  getToPathname,\n  invariant,\n  joinPaths,\n  matchPath,\n  matchRoutes,\n  normalizePathname,\n  normalizeSearch,\n  normalizeHash,\n  resolvePath,\n  resolveTo,\n  stripBasename,\n  warning,\n  warningOnce,\n} from \"./utils\";\n\ntype MemoryRouterInit = MemoryHistoryOptions & Omit<RouterInit, \"history\">;\nfunction createMemoryRouter({\n  initialEntries,\n  initialIndex,\n  ...routerInit\n}: MemoryRouterInit): Router {\n  let history = createMemoryHistory({ initialEntries, initialIndex });\n  return createRouter({ history, ...routerInit });\n}\n\ntype BrowserRouterInit = BrowserHistoryOptions & Omit<RouterInit, \"history\">;\nfunction createBrowserRouter({\n  window,\n  ...routerInit\n}: BrowserRouterInit): Router {\n  let history = createBrowserHistory({ window });\n  return createRouter({ history, ...routerInit });\n}\n\ntype HashRouterInit = HashHistoryOptions & Omit<RouterInit, \"history\">;\nfunction createHashRouter({ window, ...routerInit }: HashRouterInit): Router {\n  let history = createHashHistory({ window });\n  return createRouter({ history, ...routerInit });\n}\n\n// @remix-run/router public Type API\nexport type {\n  ActionFunctionArgs,\n  BrowserHistory,\n  BrowserRouterInit,\n  DataRouteMatch,\n  DataRouteObject,\n  Fetcher,\n  FormEncType,\n  FormMethod,\n  HashHistory,\n  HashRouterInit,\n  History,\n  HydrationState,\n  InitialEntry,\n  LoaderFunctionArgs,\n  Location,\n  MemoryHistory,\n  MemoryRouterInit,\n  NavigateOptions,\n  ParamParseKey,\n  Params,\n  Path,\n  PathMatch,\n  PathPattern,\n  RouteData,\n  RouteMatch,\n  RouteObject,\n  Router,\n  RouterInit,\n  RouterState,\n  Submission,\n  To,\n  Transition,\n};\n\n// @remix-run/router public API\nexport {\n  Action,\n  IDLE_TRANSITION,\n  createBrowserHistory,\n  createBrowserRouter,\n  createHashHistory,\n  createHashRouter,\n  createMemoryRouter,\n  createMemoryHistory,\n  createPath,\n  createRouter,\n  generatePath,\n  getToPathname,\n  invariant,\n  joinPaths,\n  matchPath,\n  matchRoutes,\n  normalizeHash,\n  normalizePathname,\n  normalizeSearch,\n  parsePath,\n  resolvePath,\n  resolveTo,\n  stripBasename,\n  warning,\n  warningOnce,\n};\n"],"names":["Action","PopStateEventType","createMemoryHistory","options","initialEntries","initialIndex","v5Compat","entries","map","entry","index","createMemoryLocation","undefined","clampIndex","length","action","Pop","listeners","createEvents","n","Math","min","max","getCurrentLocation","to","state","key","location","createLocation","pathname","warning","charAt","JSON","stringify","history","createHref","createPath","push","Push","nextLocation","splice","call","replace","Replace","go","delta","listen","listener","createBrowserHistory","createBrowserLocation","window","globalHistory","search","hash","usr","createBrowserHref","getUrlBasedHistory","createHashHistory","createHashLocation","parsePath","substr","createHashHref","base","document","querySelector","href","getAttribute","url","hashIndex","indexOf","slice","validateHashLocation","readOnly","obj","Object","freeze","cond","message","console","warn","Error","e","handlers","fn","filter","handler","arg","forEach","createKey","random","toString","getHistoryState","current","path","parsedPath","searchIndex","getLocation","validateLocation","defaultView","addEventListener","historyState","pushState","error","assign","replaceState","matchRoutes","routes","locationArg","basename","stripBasename","branches","flattenRoutes","rankRouteBranches","matches","i","matchRouteBranch","parentsMeta","parentPath","route","meta","relativePath","caseSensitive","childrenIndex","startsWith","invariant","joinPaths","routesMeta","concat","children","score","computeScore","sort","a","b","compareIndexes","paramRe","dynamicSegmentValue","indexRouteValue","emptySegmentValue","staticSegmentValue","splatPenalty","isSplat","s","segments","split","initialScore","some","reduce","segment","test","siblings","every","branch","matchedParams","matchedPathname","end","remainingPathname","match","matchPath","params","pathnameBase","normalizePathname","generatePath","_","pattern","matcher","paramNames","compilePath","captureGroups","memo","paramName","splatValue","safelyDecodeURIComponent","endsWith","regexpSource","RegExp","value","decodeURIComponent","toLowerCase","nextChar","alreadyWarned","warningOnce","resolvePath","fromPathname","toPathname","resolvePathname","normalizeSearch","normalizeHash","relativeSegments","pop","join","resolveTo","toArg","routePathnames","locationPathname","from","routePathnameIndex","toSegments","shift","getToPathname","paths","ResultType","IDLE_TRANSITION","type","formMethod","formAction","formEncType","formData","IDLE_FETCHER","data","createRouter","init","dataRoutes","convertRoutesToDataRoutes","subscriber","initialMatches","getNotFoundMatches","foundMissingHydrationData","hydrationData","errors","loaderData","m","loader","id","historyAction","initialized","transition","revalidation","actionData","fetchers","Map","pendingAction","pendingNavigationController","isUninterruptedRevalidation","isRevalidationRequired","fetchControllers","incrementingLoadId","pendingNavigationLoadId","fetchReloadIds","fetchRedirectIds","Set","fetchLoadMatches","startNavigation","HistoryAction","updateState","newState","completeNavigation","mergeLoaderData","navigate","opts","isSubmissionNavigation","submission","revalidate","transitionState","startUninterruptedRevalidation","overrideTransition","abort","loadingTransition","Response","status","isHashChangeOnly","pendingActionData","pendingActionError","isActionSubmission","actionOutput","handleAction","shortCircuited","handleLoaders","hasNakedIndexQuery","result","actionMatch","actionAbortController","AbortController","callLoaderOrAction","signal","aborted","isRedirectResult","redirectTransition","startRedirectNavigation","isErrorResult","boundaryMatch","findNearestBoundary","matchesToLoad","revalidatingFetchers","getMatchesToLoad","revalidatingFetcher","get","set","abortController","results","Promise","all","navigationResults","fetcherResults","delete","redirect","findRedirect","getLoaderRedirect","processLoaderData","markFetchRedirectsDone","didAbortFetchLoads","abortStaleFetchLoads","getFetcher","fetch","has","abortFetcher","handleFetcherAction","loadingFetcher","handleFetcherLoader","fetcher","actionResult","add","loadId","loadFetcher","staleKey","loaderResults","loaderRedirect","doneFetcher","deleteFetcher","controller","markFetchersDone","keys","doneKeys","landedId","yeetedKeys","router","subscribe","cleanup","_internalFetchControllers","allIds","treePath","dataRoute","redirectLocation","revalidatingFetcherMatches","deepestRenderableMatchIndex","findIndex","values","navigationMatches","isNewLoader","shouldRevalidateLoader","shouldRevalidate","currentLoaderData","currentMatch","isNew","isMissingData","currentLocation","currentUrl","createURL","currentParams","nextUrl","nextParams","defaultShouldRevalidate","actionSubmission","resultType","request","createRequest","headers","contentType","json","text","body","URLSearchParams","append","method","toUpperCase","Request","reusedRoutesWithData","acc","routeId","reverse","find","errorElement","getAll","v","origin","URL","createMemoryRouter","routerInit","createBrowserRouter","createHashRouter"],"mappings":"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"}