{"version":3,"file":"router.production.min.js","sources":["../../../../../packages/router/history.ts","../../../../../packages/router/utils.ts","../../../../../packages/router/router.ts","../../../../../packages/router/index.ts"],"sourcesContent":["////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Actions represent the type of change to a location value.\n */\nexport enum Action {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Pop = \"POP\",\n\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n  Push = \"PUSH\",\n\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n  Replace = \"REPLACE\",\n}\n\n/**\n * The pathname, search, and hash values of a URL.\n */\nexport interface Path {\n  /**\n   * A URL pathname, beginning with a /.\n   */\n  pathname: string;\n\n  /**\n   * A URL search string, beginning with a ?.\n   */\n  search: string;\n\n  /**\n   * A URL fragment identifier, beginning with a #.\n   */\n  hash: string;\n}\n\n/**\n * An entry in a history stack. A location contains information about the\n * URL path, as well as possibly some arbitrary state and a key.\n */\nexport interface Location extends Path {\n  /**\n   * A value of arbitrary data associated with this location.\n   */\n  state: any;\n\n  /**\n   * A unique string associated with this location. May be used to safely store\n   * and retrieve data in some other storage API, like `localStorage`.\n   *\n   * Note: This value is always \"default\" on the initial location.\n   */\n  key: string;\n}\n\n/**\n * A change to the current location.\n */\nexport interface Update {\n  /**\n   * The action that triggered the change.\n   */\n  action: Action;\n\n  /**\n   * The new location.\n   */\n  location: Location;\n}\n\n/**\n * A function that receives notifications about location changes.\n */\nexport interface Listener {\n  (update: Update): void;\n}\n\n/**\n * Describes a location that is the destination of some navigation, either via\n * `history.push` or `history.replace`. May be either a URL or the pieces of a\n * URL path.\n */\nexport type To = string | Partial<Path>;\n\n/**\n * A history is an interface to the navigation stack. The history serves as the\n * source of truth for the current location, as well as provides a set of\n * methods that may be used to change it.\n *\n * It is similar to the DOM's `window.history` object, but with a smaller, more\n * focused API.\n */\nexport interface History {\n  /**\n   * The last action that modified the current location. This will always be\n   * Action.Pop when a history instance is first created. This value is mutable.\n   */\n  readonly action: Action;\n\n  /**\n   * The current location. This value is mutable.\n   */\n  readonly location: Location;\n\n  /**\n   * Returns a valid href for the given `to` value that may be used as\n   * the value of an <a href> attribute.\n   *\n   * @param to - The destination URL\n   */\n  createHref(to: To): string;\n\n  /**\n   * Pushes a new location onto the history stack, increasing its length by one.\n   * If there were any entries in the stack after the current one, they are\n   * lost.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  push(to: To, state?: any): void;\n\n  /**\n   * Replaces the current location in the history stack with a new one.  The\n   * location that was replaced will no longer be available.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  replace(to: To, state?: any): void;\n\n  /**\n   * Navigates `n` entries backward/forward in the history stack relative to the\n   * current index. For example, a \"back\" navigation would use go(-1).\n   *\n   * @param delta - The delta in the stack index\n   */\n  go(delta: number): void;\n\n  /**\n   * Sets up a listener that will be called whenever the current location\n   * changes.\n   *\n   * @param listener - A function that will be called when the location changes\n   * @returns unlisten - A function that may be used to stop listening\n   */\n  listen(listener: Listener): () => void;\n}\n\ntype HistoryState = {\n  usr: any;\n  key?: string;\n};\n\nconst PopStateEventType = \"popstate\";\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Memory History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A user-supplied object that describes a location. Used when providing\n * entries to `createMemoryHistory` via its `initialEntries` option.\n */\nexport type InitialEntry = string | Partial<Location>;\n\nexport type MemoryHistoryOptions = {\n  initialEntries?: InitialEntry[];\n  initialIndex?: number;\n  v5Compat?: boolean;\n};\n\n/**\n * A memory history stores locations in memory. This is useful in stateful\n * environments where there is no web browser, such as node tests or React\n * Native.\n */\nexport interface MemoryHistory extends History {\n  /**\n   * The current index in the history stack.\n   */\n  readonly index: number;\n}\n\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\nexport function createMemoryHistory(\n  options: MemoryHistoryOptions = {}\n): MemoryHistory {\n  let { initialEntries = [\"/\"], initialIndex, v5Compat = false } = options;\n  let entries: Location[]; // Declare so we can access from createMemoryLocation\n  entries = initialEntries.map((entry, index) =>\n    createMemoryLocation(entry, null, index === 0 ? \"default\" : undefined)\n  );\n  let index = clampIndex(\n    initialIndex == null ? entries.length - 1 : initialIndex\n  );\n  let action = Action.Pop;\n  let listeners = createEvents<Listener>();\n\n  function clampIndex(n: number): number {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n  function getCurrentLocation(): Location {\n    return entries[index];\n  }\n  function createMemoryLocation(\n    to: To,\n    state: any = null,\n    key?: string\n  ): Location {\n    let location = createLocation(\n      entries ? getCurrentLocation().pathname : \"/\",\n      to,\n      state,\n      key\n    );\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in memory history: ${JSON.stringify(\n        to\n      )}`\n    );\n    return location;\n  }\n\n  let history: MemoryHistory = {\n    get index() {\n      return index;\n    },\n    get action() {\n      return action;\n    },\n    get location() {\n      return getCurrentLocation();\n    },\n    createHref(to) {\n      return typeof to === \"string\" ? to : createPath(to);\n    },\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n      if (v5Compat) {\n        listeners.call({ action, location: nextLocation });\n      }\n    },\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n      if (v5Compat) {\n        listeners.call({ action, location: nextLocation });\n      }\n    },\n    go(delta) {\n      action = Action.Pop;\n      index = clampIndex(index + delta);\n      listeners.call({ action, location: getCurrentLocation() });\n    },\n    listen(listener) {\n      return listeners.push(listener);\n    },\n  };\n\n  return history;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Browser History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A browser history stores the current location in regular URLs in a web\n * browser environment. This is the standard for most web apps and provides the\n * cleanest URLs the browser's address bar.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#browserhistory\n */\nexport interface BrowserHistory extends UrlHistory {}\n\nexport type BrowserHistoryOptions = UrlHistoryOptions;\n\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\nexport function createBrowserHistory(\n  options: BrowserHistoryOptions = {}\n): BrowserHistory {\n  function createBrowserLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let { pathname, search, hash } = window.location;\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      globalHistory.state?.usr || null,\n      globalHistory.state?.key || \"default\"\n    );\n  }\n\n  function createBrowserHref(window: Window, to: To) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  return getUrlBasedHistory(\n    createBrowserLocation,\n    createBrowserHref,\n    null,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Hash History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A hash history stores the current location in the fragment identifier portion\n * of the URL in a web browser environment.\n *\n * This is ideal for apps that do not control the server for some reason\n * (because the fragment identifier is never sent to the server), including some\n * shared hosting environments that do not provide fine-grained controls over\n * which pages are served at which URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#hashhistory\n */\nexport interface HashHistory extends UrlHistory {}\n\nexport type HashHistoryOptions = UrlHistoryOptions;\n\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\nexport function createHashHistory(\n  options: HashHistoryOptions = {}\n): HashHistory {\n  function createHashLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\",\n    } = parsePath(window.location.hash.substr(1));\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      globalHistory.state?.usr || null,\n      globalHistory.state?.key || \"default\"\n    );\n  }\n\n  function createHashHref(window: Window, to: To) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n\n  function validateHashLocation(location: Location, to: To) {\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in hash history.push(${JSON.stringify(\n        to\n      )})`\n    );\n  }\n\n  return getUrlBasedHistory(\n    createHashLocation,\n    createHashHref,\n    validateHashLocation,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region UTILS\n////////////////////////////////////////////////////////////////////////////////\n\nconst readOnly: <T>(obj: T) => Readonly<T> = __DEV__\n  ? (obj) => Object.freeze(obj)\n  : (obj) => obj;\n\nfunction warning(cond: any, message: string) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\ntype Events<F> = {\n  length: number;\n  push: (fn: F) => () => void;\n  call: (arg: any) => void;\n};\n\nfunction createEvents<F extends Function>(): Events<F> {\n  let handlers: F[] = [];\n\n  return {\n    get length() {\n      return handlers.length;\n    },\n    push(fn: F) {\n      handlers.push(fn);\n      return function () {\n        handlers = handlers.filter((handler) => handler !== fn);\n      };\n    },\n    call(arg) {\n      handlers.forEach((fn) => fn && fn(arg));\n    },\n  };\n}\n\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n\n/**\n * For browser-based histories, we combine the state and key into an object\n */\nfunction getHistoryState(location: Location): HistoryState {\n  return {\n    usr: location.state,\n    key: location.key,\n  };\n}\n\n/**\n * Creates a Location object with a unique key from the given Path\n */\nexport function createLocation(\n  current: string | Location,\n  to: To,\n  state: any = null,\n  key?: string\n): Location {\n  return readOnly<Location>({\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\",\n    ...(typeof to === \"string\" ? parsePath(to) : to),\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: (to as Location)?.key || key || createKey(),\n  });\n}\n\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\nexport function createPath({\n  pathname = \"/\",\n  search = \"\",\n  hash = \"\",\n}: Partial<Path>) {\n  if (search && search !== \"?\")\n    pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\")\n    pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\nexport function parsePath(path: string): Partial<Path> {\n  let parsedPath: Partial<Path> = {};\n\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n\n    let searchIndex = path.indexOf(\"?\");\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n\n  return parsedPath;\n}\n\nexport interface UrlHistory extends History {}\n\nexport type UrlHistoryOptions = {\n  window?: Window;\n  v5Compat?: boolean;\n};\n\nfunction getUrlBasedHistory(\n  getLocation: (window: Window, globalHistory: Window[\"history\"]) => Location,\n  createHref: (window: Window, to: To) => string,\n  validateLocation: ((location: Location, to: To) => void) | null,\n  options: UrlHistoryOptions = {}\n): UrlHistory {\n  let { window = document.defaultView!, v5Compat = false } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listeners = createEvents<Listener>();\n\n  window.addEventListener(PopStateEventType, () => {\n    action = Action.Pop;\n    listeners.call({ action, location: history.location });\n  });\n\n  function push(to: To, state?: any) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    validateLocation?.(location, to);\n\n    let historyState = getHistoryState(location);\n    let url = history.createHref(location);\n\n    // try...catch because iOS limits us to 100 pushState calls :/\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n\n    if (v5Compat) {\n      listeners.call({ action, location });\n    }\n  }\n\n  function replace(to: To, state?: any) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    validateLocation?.(location, to);\n\n    let historyState = getHistoryState(location);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n\n    if (v5Compat) {\n      listeners.call({ action, location: location });\n    }\n  }\n\n  let history: History = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n    createHref(to) {\n      return createHref(window, to);\n    },\n    push,\n    replace,\n    go(n) {\n      return globalHistory.go(n);\n    },\n    listen(listener) {\n      return listeners.push(listener);\n    },\n  };\n\n  return history;\n}\n\n//#endregion\n","import type { Location, Path, To } from \"./history\";\nimport { parsePath } from \"./history\";\nimport { DataResult, DataRouteMatch, Transition } from \"./router\";\n\nexport type LoaderFormMethod = \"get\";\nexport type ActionFormMethod = \"post\" | \"put\" | \"patch\" | \"delete\";\nexport type FormMethod = LoaderFormMethod | ActionFormMethod;\nexport type FormEncType = \"application/x-www-form-urlencoded\";\n\n/**\n * Internal interface to pass around, not intended for external consumption\n */\nexport interface Submission {\n  formMethod: FormMethod;\n  formAction: string;\n  formEncType: FormEncType;\n  formData: FormData;\n}\n\nexport interface ActionSubmission extends Submission {\n  formMethod: ActionFormMethod;\n}\n\n/**\n * Arguments passed to route loader functions\n */\nexport interface LoaderFunctionArgs {\n  request: Request;\n  params: Params;\n  signal: AbortSignal;\n}\n\n/**\n * Arguments passed to route action functions\n */\nexport interface ActionFunctionArgs {\n  request: Request;\n  params: Params;\n  signal: AbortSignal;\n}\n\nexport interface ShouldRevalidateFunctionArgs {\n  currentUrl: URL;\n  currentParams: DataRouteMatch[\"params\"];\n  nextUrl: URL;\n  nextParams: DataRouteMatch[\"params\"];\n  transition: Transition;\n  actionResult: DataResult | null;\n  defaultShouldRevalidate: boolean;\n}\n\n/**\n * A route object represents a logical route, with (optionally) its child\n * routes organized in a tree-like structure.\n */\nexport interface RouteObject {\n  caseSensitive?: boolean;\n  children?: RouteObject[];\n  element?: React.ReactNode;\n  index?: boolean;\n  path?: string;\n  id?: string;\n  loader?: (obj: LoaderFunctionArgs) => any | Promise<any>;\n  action?: (obj: ActionFunctionArgs) => any | Promise<any>;\n  errorElement?: React.ReactNode;\n  shouldRevalidate?: (obj: ShouldRevalidateFunctionArgs) => boolean;\n}\n\n/**\n * A data route object, which is just a RouteObject with a required unique ID\n */\nexport interface DataRouteObject extends RouteObject {\n  children?: DataRouteObject[];\n  id: string;\n}\n\ntype ParamParseFailed = { failed: true };\n\ntype ParamParseSegment<Segment extends string> =\n  // Check here if there exists a forward slash in the string.\n  Segment extends `${infer LeftSegment}/${infer RightSegment}`\n    ? // If there is a forward slash, then attempt to parse each side of the\n      // forward slash.\n      ParamParseSegment<LeftSegment> extends infer LeftResult\n      ? ParamParseSegment<RightSegment> extends infer RightResult\n        ? LeftResult extends string\n          ? // If the left side is successfully parsed as a param, then check if\n            // the right side can be successfully parsed as well. If both sides\n            // can be parsed, then the result is a union of the two sides\n            // (read: \"foo\" | \"bar\").\n            RightResult extends string\n            ? LeftResult | RightResult\n            : LeftResult\n          : // If the left side is not successfully parsed as a param, then check\n          // if only the right side can be successfully parse as a param. If it\n          // can, then the result is just right, else it's a failure.\n          RightResult extends string\n          ? RightResult\n          : ParamParseFailed\n        : ParamParseFailed\n      : // If the left side didn't parse into a param, then just check the right\n      // side.\n      ParamParseSegment<RightSegment> extends infer RightResult\n      ? RightResult extends string\n        ? RightResult\n        : ParamParseFailed\n      : ParamParseFailed\n    : // If there's no forward slash, then check if this segment starts with a\n    // colon. If it does, then this is a dynamic segment, so the result is\n    // just the remainder of the string. Otherwise, it's a failure.\n    Segment extends `:${infer Remaining}`\n    ? Remaining\n    : ParamParseFailed;\n\n// Attempt to parse the given string segment. If it fails, then just return the\n// plain string type as a default fallback. Otherwise return the union of the\n// parsed string literals that were referenced as dynamic segments in the route.\nexport type ParamParseKey<Segment extends string> =\n  ParamParseSegment<Segment> extends string\n    ? ParamParseSegment<Segment>\n    : string;\n\n/**\n * The parameters that were parsed from the URL path.\n */\nexport type Params<Key extends string = string> = {\n  readonly [key in Key]: string | undefined;\n};\n\n/**\n * A RouteMatch contains info about how a route matched a URL.\n */\nexport interface RouteMatch<\n  ParamKey extends string = string,\n  RouteObjectType extends RouteObject = RouteObject\n> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The route object that was used to match.\n   */\n  route: RouteObjectType;\n}\n\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/docs/en/v6/api#matchroutes\n */\nexport function matchRoutes<RouteObjectType extends RouteObject = RouteObject>(\n  routes: RouteObjectType[],\n  locationArg: Partial<Location> | string,\n  basename = \"/\"\n): RouteMatch<string, RouteObjectType>[] | null {\n  let location =\n    typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n\n  if (pathname == null) {\n    return null;\n  }\n\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n\n  let matches = null;\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    matches = matchRouteBranch<string, RouteObjectType>(branches[i], pathname);\n  }\n\n  return matches;\n}\n\ninterface RouteMeta<RouteObjectType extends RouteObject = RouteObject> {\n  relativePath: string;\n  caseSensitive: boolean;\n  childrenIndex: number;\n  route: RouteObjectType;\n}\n\ninterface RouteBranch<RouteObjectType extends RouteObject = RouteObject> {\n  path: string;\n  score: number;\n  routesMeta: RouteMeta<RouteObjectType>[];\n}\n\nfunction flattenRoutes<RouteObjectType extends RouteObject = RouteObject>(\n  routes: RouteObjectType[],\n  branches: RouteBranch<RouteObjectType>[] = [],\n  parentsMeta: RouteMeta<RouteObjectType>[] = [],\n  parentPath = \"\"\n): RouteBranch<RouteObjectType>[] {\n  routes.forEach((route, index) => {\n    let meta: RouteMeta<RouteObjectType> = {\n      relativePath: route.path || \"\",\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route,\n    };\n\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(\n        meta.relativePath.startsWith(parentPath),\n        `Absolute route path \"${meta.relativePath}\" nested under path ` +\n          `\"${parentPath}\" is not valid. An absolute child route path ` +\n          `must start with the combined path of all its parent routes.`\n      );\n\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta);\n\n    // Add the children before adding this route to the array so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n    if (route.children && route.children.length > 0) {\n      invariant(\n        route.index !== true,\n        `Index routes must not have child routes. Please remove ` +\n          `all child routes from route path \"${path}\".`\n      );\n\n      flattenRoutes(route.children, branches, routesMeta, path);\n    }\n\n    // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n    if (route.path == null && !route.index) {\n      return;\n    }\n\n    branches.push({ path, score: computeScore(path, route.index), routesMeta });\n  });\n\n  return branches;\n}\n\nfunction rankRouteBranches(branches: RouteBranch[]): void {\n  branches.sort((a, b) =>\n    a.score !== b.score\n      ? b.score - a.score // Higher score first\n      : compareIndexes(\n          a.routesMeta.map((meta) => meta.childrenIndex),\n          b.routesMeta.map((meta) => meta.childrenIndex)\n        )\n  );\n}\n\nconst paramRe = /^:\\w+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\nconst isSplat = (s: string) => s === \"*\";\n\nfunction computeScore(path: string, index: boolean | undefined): number {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n\n  return segments\n    .filter((s) => !isSplat(s))\n    .reduce(\n      (score, segment) =>\n        score +\n        (paramRe.test(segment)\n          ? dynamicSegmentValue\n          : segment === \"\"\n          ? emptySegmentValue\n          : staticSegmentValue),\n      initialScore\n    );\n}\n\nfunction compareIndexes(a: number[], b: number[]): number {\n  let siblings =\n    a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n\n  return siblings\n    ? // If two routes are siblings, we should try to match the earlier sibling\n      // first. This allows people to have fine-grained control over the matching\n      // behavior by simply putting routes with identical paths in the order they\n      // want them tried.\n      a[a.length - 1] - b[b.length - 1]\n    : // Otherwise, it doesn't really make sense to rank non-siblings by index,\n      // so they sort equally.\n      0;\n}\n\nfunction matchRouteBranch<\n  ParamKey extends string = string,\n  RouteObjectType extends RouteObject = RouteObject\n>(\n  branch: RouteBranch<RouteObjectType>,\n  pathname: string\n): RouteMatch<ParamKey, RouteObjectType>[] | null {\n  let { routesMeta } = branch;\n\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches: RouteMatch<ParamKey, RouteObjectType>[] = [];\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname =\n      matchedPathname === \"/\"\n        ? pathname\n        : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath(\n      { path: meta.relativePath, caseSensitive: meta.caseSensitive, end },\n      remainingPathname\n    );\n\n    if (!match) return null;\n\n    Object.assign(matchedParams, match.params);\n\n    let route = meta.route;\n\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams as Params<ParamKey>,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(\n        joinPaths([matchedPathname, match.pathnameBase])\n      ),\n      route,\n    });\n\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n\n  return matches;\n}\n\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/docs/en/v6/api#generatepath\n */\nexport function generatePath(path: string, params: Params = {}): string {\n  return path\n    .replace(/:(\\w+)/g, (_, key) => {\n      invariant(params[key] != null, `Missing \":${key}\" param`);\n      return params[key]!;\n    })\n    .replace(/\\/*\\*$/, (_) =>\n      params[\"*\"] == null ? \"\" : params[\"*\"].replace(/^\\/*/, \"/\")\n    );\n}\n\n/**\n * A PathPattern is used to match on some portion of a URL pathname.\n */\nexport interface PathPattern<Path extends string = string> {\n  /**\n   * A string to match against a URL pathname. May contain `:id`-style segments\n   * to indicate placeholders for dynamic parameters. May also end with `/*` to\n   * indicate matching the rest of the URL pathname.\n   */\n  path: Path;\n  /**\n   * Should be `true` if the static portions of the `path` should be matched in\n   * the same case.\n   */\n  caseSensitive?: boolean;\n  /**\n   * Should be `true` if this pattern should match the entire URL pathname.\n   */\n  end?: boolean;\n}\n\n/**\n * A PathMatch contains info about how a PathPattern matched on a URL pathname.\n */\nexport interface PathMatch<ParamKey extends string = string> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The pattern that was used to match.\n   */\n  pattern: PathPattern;\n}\n\ntype Mutable<T> = {\n  -readonly [P in keyof T]: T[P];\n};\n\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/docs/en/v6/api#matchpath\n */\nexport function matchPath<\n  ParamKey extends ParamParseKey<Path>,\n  Path extends string\n>(\n  pattern: PathPattern<Path> | Path,\n  pathname: string\n): PathMatch<ParamKey> | null {\n  if (typeof pattern === \"string\") {\n    pattern = { path: pattern, caseSensitive: false, end: true };\n  }\n\n  let [matcher, paramNames] = compilePath(\n    pattern.path,\n    pattern.caseSensitive,\n    pattern.end\n  );\n\n  let match = pathname.match(matcher);\n  if (!match) return null;\n\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params: Params = paramNames.reduce<Mutable<Params>>(\n    (memo, paramName, index) => {\n      // We need to compute the pathnameBase here using the raw splat value\n      // instead of using params[\"*\"] later because it will be decoded then\n      if (paramName === \"*\") {\n        let splatValue = captureGroups[index] || \"\";\n        pathnameBase = matchedPathname\n          .slice(0, matchedPathname.length - splatValue.length)\n          .replace(/(.)\\/+$/, \"$1\");\n      }\n\n      memo[paramName] = safelyDecodeURIComponent(\n        captureGroups[index] || \"\",\n        paramName\n      );\n      return memo;\n    },\n    {}\n  );\n\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern,\n  };\n}\n\nfunction compilePath(\n  path: string,\n  caseSensitive = false,\n  end = true\n): [RegExp, string[]] {\n  warning(\n    path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"),\n    `Route path \"${path}\" will be treated as if it were ` +\n      `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n      `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n      `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n  );\n\n  let paramNames: string[] = [];\n  let regexpSource =\n    \"^\" +\n    path\n      .replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n      .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n      .replace(/[\\\\.*+^$?{}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n      .replace(/:(\\w+)/g, (_: string, paramName: string) => {\n        paramNames.push(paramName);\n        return \"([^\\\\/]+)\";\n      });\n\n  if (path.endsWith(\"*\")) {\n    paramNames.push(\"*\");\n    regexpSource +=\n      path === \"*\" || path === \"/*\"\n        ? \"(.*)$\" // Already matched the initial /, just match the rest\n        : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else {\n    regexpSource += end\n      ? \"\\\\/*$\" // When matching to the end, ignore trailing slashes\n      : // Otherwise, match a word boundary or a proceeding /. The word boundary restricts\n        // parent routes to matching only their own words and nothing more, e.g. parent\n        // route \"/home\" should not match \"/home2\".\n        // Additionally, allow paths starting with `.`, `-`, `~`, and url-encoded entities,\n        // but do not consume the character in the matched path so they can match against\n        // nested paths.\n        \"(?:(?=[.~-]|%[0-9A-F]{2})|\\\\b|\\\\/|$)\";\n  }\n\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n\n  return [matcher, paramNames];\n}\n\nfunction safelyDecodeURIComponent(value: string, paramName: string) {\n  try {\n    return decodeURIComponent(value);\n  } catch (error) {\n    warning(\n      false,\n      `The value for the URL param \"${paramName}\" will not be decoded because` +\n        ` the string \"${value}\" is a malformed URL segment. This is probably` +\n        ` due to a bad percent encoding (${error}).`\n    );\n\n    return value;\n  }\n}\n\nexport function stripBasename(\n  pathname: string,\n  basename: string\n): string | null {\n  if (basename === \"/\") return pathname;\n\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  }\n\n  let nextChar = pathname.charAt(basename.length);\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n\n  return pathname.slice(basename.length) || \"/\";\n}\n\nexport function invariant(value: boolean, message?: string): asserts value;\nexport function invariant<T>(\n  value: T | null | undefined,\n  message?: string\n): asserts value is T;\nexport function invariant(value: any, message?: string) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\n\nexport function warning(cond: any, message: string): void {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging React Router!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\nconst alreadyWarned: Record<string, boolean> = {};\nexport function warningOnce(key: string, cond: boolean, message: string) {\n  if (!cond && !alreadyWarned[key]) {\n    alreadyWarned[key] = true;\n    warning(false, message);\n  }\n}\n\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/docs/en/v6/api#resolvepath\n */\nexport function resolvePath(to: To, fromPathname = \"/\"): Path {\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\",\n  } = typeof to === \"string\" ? parsePath(to) : to;\n\n  let pathname = toPathname\n    ? toPathname.startsWith(\"/\")\n      ? toPathname\n      : resolvePathname(toPathname, fromPathname)\n    : fromPathname;\n\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash),\n  };\n}\n\nfunction resolvePathname(relativePath: string, fromPathname: string): string {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n\n  relativeSegments.forEach((segment) => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\n\nexport function resolveTo(\n  toArg: To,\n  routePathnames: string[],\n  locationPathname: string\n): Path {\n  let to = typeof toArg === \"string\" ? parsePath(toArg) : toArg;\n  let toPathname = toArg === \"\" || to.pathname === \"\" ? \"/\" : to.pathname;\n\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n  let from: string;\n  if (toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n\n    if (toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\");\n\n      // Each leading .. segment means \"go up one route\" instead of \"go up one\n      // URL segment\".  This is a key difference from how <a href> works and a\n      // major reason we call this a \"to\" value instead of a \"href\".\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    }\n\n    // If there are more \"..\" segments than parent routes, resolve relative to\n    // the root / URL.\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n\n  let path = resolvePath(to, from);\n\n  // Ensure the pathname has a trailing slash if the original to value had one.\n  if (\n    toPathname &&\n    toPathname !== \"/\" &&\n    toPathname.endsWith(\"/\") &&\n    !path.pathname.endsWith(\"/\")\n  ) {\n    path.pathname += \"/\";\n  }\n\n  return path;\n}\n\nexport function getToPathname(to: To): string | undefined {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || (to as Path).pathname === \"\"\n    ? \"/\"\n    : typeof to === \"string\"\n    ? parsePath(to).pathname\n    : to.pathname;\n}\n\nexport const joinPaths = (paths: string[]): string =>\n  paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n\nexport const normalizePathname = (pathname: string): string =>\n  pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n\nexport const normalizeSearch = (search: string): string =>\n  !search || search === \"?\"\n    ? \"\"\n    : search.startsWith(\"?\")\n    ? search\n    : \"?\" + search;\n\nexport const normalizeHash = (hash: string): string =>\n  !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n","import { History, Location, parsePath, To } from \"./history\";\nimport { Action as HistoryAction, createLocation } from \"./history\";\n\nimport {\n  ActionFormMethod,\n  ActionSubmission,\n  DataRouteObject,\n  FormEncType,\n  FormMethod,\n  invariant,\n  LoaderFormMethod,\n  RouteMatch,\n  RouteObject,\n  Submission,\n} from \"./utils\";\nimport { matchRoutes } from \"./utils\";\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Map of routeId -> data returned from a loader/action/error\n */\nexport interface RouteData {\n  [routeId: string]: any;\n}\n\nexport interface DataRouteMatch extends RouteMatch<string, DataRouteObject> {}\n\n/**\n * A Router instance manages all navigation and data loading/mutations\n */\nexport interface Router {\n  get state(): RouterState;\n  subscribe(fn: RouterSubscriber): () => void;\n  navigate(path: number): Promise<void>;\n  navigate(path: To, opts?: NavigateOptions): Promise<void>;\n  fetch(key: string, href: string, opts?: NavigateOptions): Promise<void>;\n  revalidate(): Promise<void>;\n  createHref(location: Location | URL): string;\n  getFetcher<TData = any>(key?: string): Fetcher<TData>;\n  deleteFetcher(key?: string): void;\n  cleanup(): void;\n  _internalFetchControllers: Map<string, AbortController>;\n}\n\n/**\n * State maintained internally by the router.  During a navigation, all states\n * reflect the the \"old\" location unless otherwise noted.\n */\nexport interface RouterState {\n  /**\n   * The action of the most recent navigation\n   */\n  historyAction: HistoryAction;\n\n  /**\n   * The current location reflected by the router\n   */\n  location: Location;\n\n  /**\n   * The current set of route matches\n   */\n  matches: DataRouteMatch[];\n\n  /**\n   * Tracks whether we've completed our initial data load\n   */\n  initialized: boolean;\n\n  /**\n   * Tracks the state of the current transition\n   */\n  transition: Transition;\n\n  /**\n   * Tracks any in-progress revalidations\n   */\n  revalidation: RevalidationState;\n\n  /**\n   * Data from the loaders for the current matches\n   */\n  loaderData: RouteData;\n\n  /**\n   * Data from the action for the current matches\n   */\n  actionData: RouteData | null;\n\n  /**\n   * Errors caught from loaders for the current matches\n   */\n  errors: RouteData | null;\n\n  /**\n   * Map of current fetchers\n   */\n  fetchers: Map<string, Fetcher>;\n}\n\n/**\n * Data that can be passed into hydrate a Router from SSR\n */\nexport type HydrationState = Partial<\n  Pick<RouterState, \"loaderData\" | \"actionData\" | \"errors\">\n>;\n\n/**\n * Initialization options for createRouter\n */\nexport interface RouterInit {\n  routes: RouteObject[];\n  history: History;\n  hydrationData?: HydrationState;\n}\n\nexport interface RouterSubscriber {\n  (state: RouterState): void;\n}\n\n/**\n * Options for a navigate() call for a Link navigation\n */\ntype LinkNavigateOptions = {\n  replace?: boolean;\n  state?: any;\n};\n\n/**\n * Options for a navigate() call for a Form navigation\n */\ntype SubmissionNavigateOptions = {\n  replace?: boolean;\n  state?: any;\n  formMethod?: FormMethod;\n  formEncType?: FormEncType;\n  formData: FormData;\n};\n\n/**\n * Options to pass to navigate() for either a Link or Form navigation\n */\nexport type NavigateOptions = LinkNavigateOptions | SubmissionNavigateOptions;\n\n/**\n * Potential states for state.transition\n */\nexport type TransitionStates = {\n  Idle: {\n    state: \"idle\";\n    type: \"idle\";\n    location: undefined;\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    type: \"normalLoad\";\n    location: Location;\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n  };\n  LoadingRedirect: {\n    state: \"loading\";\n    type: \"normalRedirect\";\n    location: Location;\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n  };\n  SubmittingLoader: {\n    state: \"submitting\";\n    type: \"loaderSubmission\";\n    location: Location;\n    formMethod: LoaderFormMethod;\n    formAction: string;\n    formEncType: \"application/x-www-form-urlencoded\";\n    formData: FormData;\n  };\n  SubmissionRedirect: {\n    state: \"loading\";\n    type: \"submissionRedirect\";\n    location: Location;\n    formMethod: FormMethod;\n    formAction: string;\n    formEncType: FormEncType;\n    formData: FormData;\n  };\n  SubmittingAction: {\n    state: \"submitting\";\n    type: \"actionSubmission\";\n    location: Location;\n    formMethod: ActionFormMethod;\n    formAction: string;\n    formEncType: FormEncType;\n    formData: FormData;\n  };\n  LoadingAction: {\n    state: \"loading\";\n    type: \"actionReload\";\n    location: Location;\n    formMethod: ActionFormMethod;\n    formAction: string;\n    formEncType: FormEncType;\n    formData: FormData;\n  };\n};\n\nexport type Transition = TransitionStates[keyof TransitionStates];\n\nexport type RevalidationState = \"idle\" | \"loading\";\n\ntype FetcherStates<TData = any> = {\n  Idle: {\n    state: \"idle\";\n    type: \"init\";\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n    data: undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    type: \"normalLoad\";\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n    data: TData | undefined;\n  };\n  SubmittingLoader: {\n    state: \"submitting\";\n    type: \"loaderSubmission\";\n    formMethod: FormMethod;\n    formAction: string;\n    formEncType: \"application/x-www-form-urlencoded\";\n    formData: FormData;\n    data: TData | undefined;\n  };\n  SubmittingAction: {\n    state: \"submitting\";\n    type: \"actionSubmission\";\n    formMethod: ActionFormMethod;\n    formAction: string;\n    formEncType: FormEncType;\n    formData: FormData;\n    data: undefined;\n  };\n  ReloadingAction: {\n    state: \"loading\";\n    type: \"actionReload\";\n    formMethod: ActionFormMethod;\n    formAction: string;\n    formEncType: FormEncType;\n    formData: FormData;\n    data: TData;\n  };\n  SubmissionRedirect: {\n    state: \"loading\";\n    type: \"submissionRedirect\";\n    formMethod: ActionFormMethod;\n    formAction: string;\n    formEncType: FormEncType;\n    formData: FormData;\n    data: undefined;\n  };\n  Revalidating: {\n    state: \"loading\";\n    type: \"revalidate\";\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n    data: TData | undefined;\n  };\n  Done: {\n    state: \"idle\";\n    type: \"done\";\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n    data: TData;\n  };\n};\n\nexport type Fetcher<TData = any> =\n  FetcherStates<TData>[keyof FetcherStates<TData>];\n\nenum ResultType {\n  data = \"data\",\n  redirect = \"redirect\",\n  error = \"error\",\n}\n\n/**\n * Successful result from a loader or action\n */\nexport interface SuccessResult {\n  type: ResultType.data;\n  data: any;\n}\n\n/**\n * Redirect result from a loader or action\n */\nexport interface RedirectResult {\n  type: ResultType.redirect;\n  status: number;\n  location: string;\n  revalidate: boolean;\n}\n\n/**\n * Unsuccessful result from a loader or action\n */\nexport interface ErrorResult {\n  type: ResultType.error;\n  error: any;\n}\n\n/**\n * Result from a loader or action - potentially successful or unsuccessful\n */\nexport type DataResult = SuccessResult | RedirectResult | ErrorResult;\n\ninterface ShortCircuitable {\n  /**\n   * startNavigation does not need to complete the navigation because we\n   * redirected or got interrupted\n   */\n  shortCircuited?: boolean;\n}\n\ninterface HandleActionResult extends ShortCircuitable {\n  /**\n   * Error thrown from the current action, keyed by the route containing the\n   * errorElement to render the error.  To be committed to the state after\n   * loaders have completed\n   */\n  pendingActionError?: RouteData;\n  /**\n   * Data returned from the current action, keyed by the route owning the action.\n   * To be committed to the state after loaders have completed\n   */\n  pendingActionData?: RouteData;\n}\n\ninterface HandleLoadersResult extends ShortCircuitable {\n  /**\n   * loaderData returned from the current set of loaders\n   */\n  loaderData?: RouterState[\"loaderData\"];\n  /**\n   * errors thrown from the current set of loaders\n   */\n  errors?: RouterState[\"errors\"];\n}\n\nexport const IDLE_TRANSITION: TransitionStates[\"Idle\"] = {\n  state: \"idle\",\n  location: undefined,\n  type: \"idle\",\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n};\n\nexport const IDLE_FETCHER: FetcherStates[\"Idle\"] = {\n  state: \"idle\",\n  type: \"init\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n};\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Create a router and listen to history POP navigations\n */\nexport function createRouter(init: RouterInit): Router {\n  invariant(\n    init.routes.length > 0,\n    \"You must provide a non-empty routes array to use Data Routers\"\n  );\n\n  let dataRoutes = convertRoutesToDataRoutes(init.routes);\n  let subscriber: RouterSubscriber | null = null;\n\n  let initialMatches =\n    matchRoutes(dataRoutes, init.history.location) ||\n    getNotFoundMatches(dataRoutes);\n\n  // If we received hydration data without errors - detect if any matched\n  // routes with loaders did not get provided loaderData, and if so launch an\n  // initial data re-load to fetch everything\n  let foundMissingHydrationData =\n    init.hydrationData?.errors == null &&\n    init.hydrationData?.loaderData != null &&\n    initialMatches\n      .filter((m) => m.route.loader)\n      .some((m) => init.hydrationData?.loaderData?.[m.route.id] === undefined);\n\n  if (foundMissingHydrationData) {\n    console.warn(\n      `The provided hydration data did not find loaderData for all matched ` +\n        `routes with loaders.  Performing a full initial data load`\n    );\n  }\n\n  let state: RouterState = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the errorElement to take over\n    matches: initialMatches,\n    initialized: init.hydrationData != null && !foundMissingHydrationData,\n    transition: IDLE_TRANSITION,\n    revalidation: \"idle\",\n    loaderData: foundMissingHydrationData\n      ? {}\n      : init.hydrationData?.loaderData || {},\n    actionData: init.hydrationData?.actionData || null,\n    errors: init.hydrationData?.errors || null,\n    fetchers: new Map(),\n  };\n\n  // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n  let pendingAction: HistoryAction | null = null;\n  // AbortController for the active navigation\n  let pendingNavigationController: AbortController | null;\n  // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n  let isUninterruptedRevalidation = false;\n  // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidate()\n  //  - X-Remix-Revalidate (from redirect)\n  let isRevalidationRequired = false;\n  // AbortControllers for any in-flight fetchers\n  let fetchControllers = new Map();\n  // Track loads based on the order in which they started\n  let incrementingLoadId = 0;\n  // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n  let pendingNavigationLoadId = -1;\n  // Fetchers that triggered data reloads as a result of their actions\n  let fetchReloadIds = new Map<string, number>();\n  // Fetchers that triggered redirect navigations from their actions\n  let fetchRedirectIds = new Set<string>();\n  // Most recent href/match for fetcher.load calls for fetchers\n  let fetchLoadMatches = new Map<string, [string, DataRouteMatch]>();\n\n  // If history informs us of a POP navigation, start the transition but do not update\n  // state.  We'll update our own state once the transition completes\n  init.history.listen(({ action: historyAction, location }) =>\n    startNavigation(historyAction, location)\n  );\n\n  // Kick off initial data load if needed.  Use Pop to avoid modifying history\n  if (!state.initialized) {\n    startNavigation(HistoryAction.Pop, state.location);\n  }\n\n  // Update our state and notify the calling context of the change\n  function updateState(newState: Partial<RouterState>): void {\n    state = {\n      ...state,\n      ...newState,\n    };\n    subscriber?.(state);\n  }\n\n  // Complete a navigation returning the state.transition back to the IDLE_TRANSITION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - HistoryAction and Location are required params\n  // - Transition will always be set to IDLE_TRANSITION\n  // - Can pass any other state in newState\n  function completeNavigation(\n    historyAction: HistoryAction,\n    location: Location,\n    newState: Partial<Omit<RouterState, \"action\" | \"location\" | \"transition\">>\n  ): void {\n    updateState({\n      // Clear existing actionData on any completed navigation beyond the original\n      // action.  Do this prior to spreading in newState in case we've gotten back\n      // to back actions\n      ...(state.actionData != null && state.transition.type !== \"actionReload\"\n        ? { actionData: null }\n        : {}),\n      ...newState,\n      historyAction,\n      location,\n      initialized: true,\n      transition: IDLE_TRANSITION,\n      revalidation: \"idle\",\n      // Always preserve any existing loaderData from re-used routes\n      loaderData: mergeLoaderData(state, newState),\n    });\n\n    if (isUninterruptedRevalidation) {\n      // If this was an uninterrupted revalidation then do not touch history\n    } else if (historyAction === HistoryAction.Pop) {\n      // Do nothing for POP - URL has already been updated\n    } else if (historyAction === HistoryAction.Push) {\n      init.history.push(location, location.state);\n    } else if (historyAction === HistoryAction.Replace) {\n      init.history.replace(location, location.state);\n    }\n\n    // Reset stateful navigation vars\n    pendingAction = null;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n  }\n\n  async function navigate(\n    path: number | To,\n    opts?: NavigateOptions\n  ): Promise<void> {\n    if (typeof path === \"number\") {\n      init.history.go(path);\n      return;\n    }\n\n    let location = createLocation(state.location, path, opts?.state);\n    let historyAction = opts?.replace\n      ? HistoryAction.Replace\n      : HistoryAction.Push;\n\n    if (isSubmissionNavigation(opts)) {\n      return await startNavigation(historyAction, location, {\n        submission: {\n          formMethod: opts.formMethod || \"get\",\n          formAction: createHref(location),\n          formEncType: opts?.formEncType || \"application/x-www-form-urlencoded\",\n          formData: opts.formData,\n        },\n      });\n    }\n\n    return await startNavigation(historyAction, location);\n  }\n\n  async function revalidate(): Promise<void> {\n    let { state: transitionState, type } = state.transition;\n\n    // Toggle isRevalidationRequired so the next data load will call all loaders,\n    // and mark us in a revalidating state\n    isRevalidationRequired = true;\n    updateState({ revalidation: \"loading\" });\n\n    // If we're currently submitting an action, we don't need to start a new\n    // transition, we'll just let the follow up loader execution call all loaders\n    if (transitionState === \"submitting\" && type === \"actionSubmission\") {\n      return;\n    }\n\n    // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n    if (state.transition.state === \"idle\") {\n      return await startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true,\n      });\n    }\n\n    // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the transition.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n    return await startNavigation(\n      pendingAction || state.historyAction,\n      state.transition.location,\n      { overrideTransition: state.transition }\n    );\n  }\n\n  // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideTransition which will override the normalLoad in the case of a redirect\n  // navigation\n  async function startNavigation(\n    historyAction: HistoryAction,\n    location: Location,\n    opts?: {\n      submission?: Submission;\n      overrideTransition?: Transition;\n      startUninterruptedRevalidation?: boolean;\n    }\n  ): Promise<void> {\n    // Abort any in-progress navigations and start a new one\n    pendingNavigationController?.abort();\n    pendingAction = historyAction;\n\n    // Unset any ongoing uninterrupted revalidations (unless told otherwise),\n    // since we want this new navigation to update history normally\n    isUninterruptedRevalidation = opts?.startUninterruptedRevalidation === true;\n\n    let loadingTransition = opts?.overrideTransition;\n    let matches = matchRoutes(dataRoutes, location);\n\n    // Short circuit with a 404 on the root error boundary if we match nothing\n    if (!matches) {\n      completeNavigation(historyAction, location, {\n        matches: getNotFoundMatches(dataRoutes),\n        errors: {\n          [dataRoutes[0].id]: new Response(null, { status: 404 }),\n        },\n      });\n      return;\n    }\n\n    // Short circuit if it's only a hash change\n    if (isHashChangeOnly(state.location, location)) {\n      completeNavigation(historyAction, location, {\n        matches,\n      });\n      return;\n    }\n\n    // Call action if we received an action submission\n    let pendingActionData: RouteData | null = null;\n    let pendingActionError: RouteData | null = null;\n\n    if (opts?.submission && isActionSubmission(opts.submission)) {\n      let actionOutput = await handleAction(\n        historyAction,\n        location,\n        opts.submission,\n        matches\n      );\n\n      if (actionOutput.shortCircuited) {\n        return;\n      }\n\n      pendingActionData = actionOutput.pendingActionData || null;\n      pendingActionError = actionOutput.pendingActionError || null;\n      loadingTransition = {\n        state: \"loading\",\n        type: \"actionReload\",\n        location,\n        ...opts.submission,\n      } as TransitionStates[\"LoadingAction\"];\n    }\n\n    // Call loaders\n    let { shortCircuited, loaderData, errors } = await handleLoaders(\n      historyAction,\n      location,\n      opts?.submission,\n      matches,\n      loadingTransition,\n      pendingActionData,\n      pendingActionError\n    );\n\n    if (shortCircuited) {\n      return;\n    }\n\n    completeNavigation(historyAction, location, {\n      matches,\n      loaderData,\n      errors,\n    });\n  }\n\n  async function handleAction(\n    historyAction: HistoryAction,\n    location: Location,\n    submission: ActionSubmission,\n    matches: DataRouteMatch[]\n  ): Promise<HandleActionResult> {\n    isRevalidationRequired = true;\n\n    if (\n      matches[matches.length - 1].route.index &&\n      !hasNakedIndexQuery(location.search)\n    ) {\n      // Note: OK to mutate this in-place since it's a scoped var inside\n      // handleAction and mutation will not impact the startNavigation matches\n      // variable that we use for revalidation\n      matches = matches.slice(0, -1);\n    }\n\n    // Put us in a submitting state\n    let { formMethod, formAction, formEncType, formData } = submission;\n    let transition: TransitionStates[\"SubmittingAction\"] = {\n      state: \"submitting\",\n      type: \"actionSubmission\",\n      location,\n      formMethod,\n      formAction,\n      formEncType,\n      formData,\n    };\n    updateState({ transition });\n\n    // Call our action and get the result\n    let result: DataResult;\n\n    let actionMatch = matches.slice(-1)[0];\n    if (!actionMatch.route.action) {\n      if (__DEV__) {\n        console.warn(\n          \"You're trying to submit to a route that does not have an action.  To \" +\n            \"fix this, please add an `action` function to the route for \" +\n            `[${createHref(location)}]`\n        );\n      }\n      result = {\n        type: ResultType.error,\n        error: new Response(null, { status: 405 }),\n      };\n    } else {\n      // Create a controller for this data load\n      let actionAbortController = new AbortController();\n      pendingNavigationController = actionAbortController;\n\n      result = await callLoaderOrAction(\n        actionMatch,\n        location,\n        actionAbortController.signal,\n        submission\n      );\n\n      if (actionAbortController.signal.aborted) {\n        return { shortCircuited: true };\n      }\n\n      // Clean up now that the loaders have completed.  We do do not clean up if\n      // we short circuited because pendingNavigationController will have already\n      // been assigned to a new controller for the next navigation\n      pendingNavigationController = null;\n    }\n\n    // If the action threw a redirect Response, start a new REPLACE navigation\n    if (isRedirectResult(result)) {\n      let redirectTransition: TransitionStates[\"SubmissionRedirect\"] = {\n        state: \"loading\",\n        type: \"submissionRedirect\",\n        location: createLocation(state.location, result.location),\n        ...submission,\n      };\n      await startRedirectNavigation(result, redirectTransition);\n      return { shortCircuited: true };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      return {\n        pendingActionError: { [boundaryMatch.route.id]: result.error },\n      };\n    }\n\n    return {\n      pendingActionData: { [actionMatch.route.id]: result.data },\n    };\n  }\n\n  async function handleLoaders(\n    historyAction: HistoryAction,\n    location: Location,\n    submission: Submission | undefined,\n    matches: DataRouteMatch[],\n    overrideTransition: Transition | undefined,\n    pendingActionData: RouteData | null,\n    pendingActionError: RouteData | null\n  ): Promise<HandleLoadersResult> {\n    // Figure out the right transition we want to use for data loading\n    let loadingTransition;\n\n    if (overrideTransition) {\n      loadingTransition = overrideTransition;\n    } else if (submission?.formMethod === \"get\") {\n      loadingTransition = {\n        state: \"submitting\",\n        type: \"loaderSubmission\",\n        location,\n        ...submission,\n      } as TransitionStates[\"SubmittingLoader\"];\n    } else {\n      loadingTransition = {\n        state: \"loading\",\n        type: \"normalLoad\",\n        location,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n      } as TransitionStates[\"Loading\"];\n    }\n\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      state,\n      matches,\n      // Pass the current transition if this is an uninterrupted revalidation,\n      // since we aren't actually \"navigating\".  Otherwise pass the transition\n      // we're about to commit\n      isUninterruptedRevalidation ? state.transition : loadingTransition,\n      location,\n      isRevalidationRequired,\n      pendingActionData,\n      pendingActionError,\n      fetchLoadMatches\n    );\n\n    // Short circuit if we have no loaders to run\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      completeNavigation(historyAction, location, {\n        matches,\n        // Commit pending action error if we're short circuiting\n        errors: pendingActionError || null,\n        actionData: pendingActionData || null,\n      });\n      return { shortCircuited: true };\n    }\n\n    // If this is an uninterrupted revalidation, remain in our current idle state.\n    // Otherwise, transition to our loading state and load data, preserving any\n    // new action data or existing action data (in the case of a revalidation\n    // interrupting an actionReload)\n    if (!isUninterruptedRevalidation) {\n      revalidatingFetchers.forEach(([key]) => {\n        let revalidatingFetcher: FetcherStates[\"Revalidating\"] = {\n          state: \"loading\",\n          type: \"revalidate\",\n          data: state.fetchers.get(key)?.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined,\n        };\n        state.fetchers.set(key, revalidatingFetcher);\n      });\n      updateState({\n        transition: loadingTransition,\n        actionData: pendingActionData || state.actionData || null,\n        ...(revalidatingFetchers.length > 0\n          ? { fetchers: new Map(state.fetchers) }\n          : {}),\n      });\n    }\n\n    // Start the data load\n    let abortController = new AbortController();\n    pendingNavigationController = abortController;\n    pendingNavigationLoadId = ++incrementingLoadId;\n    revalidatingFetchers.forEach(([key]) =>\n      fetchControllers.set(key, abortController)\n    );\n\n    // Call all navigation loaders and revalidating fetcher loaders in parallel,\n    // then slice off the results into separate arrays so we can handle them\n    // accordingly\n    let results = await Promise.all([\n      ...matchesToLoad.map((m) =>\n        callLoaderOrAction(m, location, abortController.signal)\n      ),\n      ...revalidatingFetchers.map(([, href, match]) =>\n        callLoaderOrAction(match, href, abortController.signal)\n      ),\n    ]);\n    let navigationResults = results.slice(0, matchesToLoad.length);\n    let fetcherResults = results.slice(matchesToLoad.length);\n\n    if (abortController.signal.aborted) {\n      return { shortCircuited: true };\n    }\n\n    // Clean up now that the loaders have completed.  We do do not clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n    pendingNavigationController = null;\n    revalidatingFetchers.forEach((key) => fetchControllers.delete(key));\n\n    // If any loaders returned a redirect Response, start a new REPLACE navigation\n    let redirect = findRedirect(results);\n    if (redirect) {\n      let redirectTransition = getLoaderRedirect(state, redirect);\n      await startRedirectNavigation(redirect, redirectTransition);\n      return { shortCircuited: true };\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      matches,\n      matchesToLoad,\n      navigationResults,\n      pendingActionError,\n      revalidatingFetchers,\n      fetcherResults\n    );\n\n    markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n\n    return {\n      loaderData,\n      errors,\n      ...(didAbortFetchLoads || revalidatingFetchers.length > 0\n        ? { fetchers: new Map(state.fetchers) }\n        : {}),\n    };\n  }\n\n  function getFetcher<TData = any>(key: string): Fetcher<TData> {\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  }\n\n  async function fetch(key: string, href: string, opts?: NavigateOptions) {\n    if (typeof AbortController === \"undefined\") {\n      throw new Error(\n        \"router.fetch() was called during the server render, but it shouldn't be. \" +\n          \"You are likely calling a useFetcher() method in the body of your component. \" +\n          \"Try moving it to a useEffect or a callback.\"\n      );\n    }\n\n    let matches = matchRoutes(dataRoutes, href);\n    invariant(matches, `No matches found for fetch url: ${href}`);\n\n    if (fetchControllers.has(key)) abortFetcher(key);\n\n    let match =\n      matches[matches.length - 1].route.index &&\n      !hasNakedIndexQuery(parsePath(href).search || \"\")\n        ? matches.slice(-2)[0]\n        : matches.slice(-1)[0];\n\n    if (isSubmissionNavigation(opts)) {\n      let submission: Submission = {\n        formMethod: opts.formMethod || \"get\",\n        formAction: href,\n        formEncType: opts.formEncType || \"application/x-www-form-urlencoded\",\n        formData: opts.formData,\n      };\n      if (isActionSubmission(submission)) {\n        await handleFetcherAction(key, href, match, submission);\n      } else {\n        let loadingFetcher: FetcherStates[\"SubmittingLoader\"] = {\n          state: \"submitting\",\n          type: \"loaderSubmission\",\n          ...submission,\n          data: state.fetchers.get(key)?.data || undefined,\n        };\n\n        await handleFetcherLoader(key, href, match, loadingFetcher);\n      }\n    } else {\n      let loadingFetcher: FetcherStates[\"Loading\"] = {\n        state: \"loading\",\n        type: \"normalLoad\",\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n        data: state.fetchers.get(key)?.data || undefined,\n      };\n\n      await handleFetcherLoader(key, href, match, loadingFetcher);\n    }\n  }\n\n  async function handleFetcherAction(\n    key: string,\n    href: string,\n    match: DataRouteMatch,\n    submission: ActionSubmission\n  ) {\n    isRevalidationRequired = true;\n    fetchLoadMatches.delete(key);\n\n    // Put this fetcher into it's submitting state\n    let fetcher: FetcherStates[\"SubmittingAction\"] = {\n      state: \"submitting\",\n      type: \"actionSubmission\",\n      ...submission,\n      data: state.fetchers.get(key)?.data || undefined,\n    };\n    state.fetchers.set(key, fetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    // Call the action for the fetcher\n    let abortController = new AbortController();\n    fetchControllers.set(key, abortController);\n\n    let actionResult = await callLoaderOrAction(\n      match,\n      href,\n      abortController.signal,\n      submission\n    );\n\n    if (abortController.signal.aborted) {\n      return;\n    }\n\n    if (isRedirectResult(actionResult)) {\n      fetchRedirectIds.add(key);\n      let loadingFetcher: FetcherStates[\"SubmissionRedirect\"] = {\n        state: \"loading\",\n        type: \"submissionRedirect\",\n        ...submission,\n        data: undefined,\n      };\n      state.fetchers.set(key, loadingFetcher);\n      updateState({ fetchers: new Map(state.fetchers) });\n\n      let redirectTransition: TransitionStates[\"SubmissionRedirect\"] = {\n        state: \"loading\",\n        type: \"submissionRedirect\",\n        location: createLocation(state.location, actionResult.location),\n        ...submission,\n      };\n      await startRedirectNavigation(actionResult, redirectTransition);\n      return;\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(actionResult)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match.route.id);\n      state.fetchers.delete(key);\n      updateState({\n        fetchers: new Map(state.fetchers),\n        errors: {\n          [boundaryMatch.route.id]: actionResult.error,\n        },\n      });\n      return;\n    }\n\n    // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n    let nextLocation = state.transition.location || state.location;\n    let matches =\n      state.transition.type !== \"idle\"\n        ? matchRoutes(dataRoutes, state.transition.location)\n        : state.matches;\n\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n\n    let loadFetcher: FetcherStates[\"ReloadingAction\"] = {\n      state: \"loading\",\n      type: \"actionReload\",\n      data: actionResult.data,\n      ...submission,\n    };\n    state.fetchers.set(key, loadFetcher);\n\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      state,\n      matches,\n      state.transition,\n      nextLocation,\n      isRevalidationRequired,\n      null,\n      null,\n      fetchLoadMatches\n    );\n\n    // Put all revalidating fetchers into the revalidating state, except for the\n    // current fetcher which we want to keep in the actionReload state\n    revalidatingFetchers\n      .filter(([staleKey]) => staleKey !== key)\n      .forEach(([staleKey]) => {\n        let revalidatingFetcher: FetcherStates[\"Revalidating\"] = {\n          state: \"loading\",\n          type: \"revalidate\",\n          data: state.fetchers.get(key)?.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined,\n        };\n        state.fetchers.set(staleKey, revalidatingFetcher);\n        fetchControllers.set(staleKey, abortController);\n      });\n\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    // Call all navigation loaders and revalidating fetcher loaders in parallel,\n    // then slice off the results into separate arrays so we can handle them\n    // accordingly\n    let results = await Promise.all([\n      ...matchesToLoad.map((m) =>\n        callLoaderOrAction(m, nextLocation, abortController.signal)\n      ),\n      ...revalidatingFetchers.map(([, href, match]) =>\n        callLoaderOrAction(match, href, abortController.signal)\n      ),\n    ]);\n    let loaderResults = results.slice(0, matchesToLoad.length);\n    let fetcherResults = results.slice(matchesToLoad.length);\n\n    if (abortController.signal.aborted) {\n      return;\n    }\n\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach((staleKey) =>\n      fetchControllers.delete(staleKey)\n    );\n\n    let loaderRedirect = findRedirect(loaderResults);\n    if (loaderRedirect) {\n      let redirectTransition = getLoaderRedirect(state, loaderRedirect);\n      await startRedirectNavigation(loaderRedirect, redirectTransition);\n      return;\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      state.matches,\n      matchesToLoad,\n      loaderResults,\n      null,\n      revalidatingFetchers,\n      fetcherResults\n    );\n\n    let doneFetcher: FetcherStates[\"Done\"] = {\n      state: \"idle\",\n      type: \"done\",\n      data: actionResult.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n    };\n    state.fetchers.set(key, doneFetcher);\n\n    let didAbortFetchLoads = abortStaleFetchLoads(loadId);\n\n    // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n    if (\n      state.transition.state === \"loading\" &&\n      loadId > pendingNavigationLoadId\n    ) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController?.abort();\n\n      completeNavigation(pendingAction, state.transition.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers),\n      });\n    } else {\n      // otherwise just update with the fetcher data\n      updateState({\n        errors,\n        loaderData,\n        ...(didAbortFetchLoads ? { fetchers: new Map(state.fetchers) } : {}),\n      });\n      isRevalidationRequired = false;\n    }\n  }\n\n  async function handleFetcherLoader(\n    key: string,\n    href: string,\n    match: DataRouteMatch,\n    loadingFetcher: Fetcher\n  ) {\n    // Put this fetcher into it's loading state\n    state.fetchers.set(key, loadingFetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    // Store off the match so we can call it's shouldRevalidate\n    fetchLoadMatches.set(key, [href, match]);\n\n    // Call the loader for this fetcher route match\n    let abortController = new AbortController();\n    fetchControllers.set(key, abortController);\n    let result: DataResult = await callLoaderOrAction(\n      match,\n      href,\n      abortController.signal\n    );\n\n    if (abortController.signal.aborted) return;\n    fetchControllers.delete(key);\n\n    // If the loader threw a redirect Response, start a new REPLACE navigation\n    if (isRedirectResult(result)) {\n      let redirectTransition = getLoaderRedirect(state, result);\n      await startRedirectNavigation(result, redirectTransition);\n      return;\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match.route.id);\n      state.fetchers.delete(key);\n      // TODO: In remix, this would reset to IDLE_TRANSITION if it was a catch -\n      // do we need to behave any differently with our non-redirect errors?\n      // What if it was a non-redirect Response?\n      updateState({\n        fetchers: new Map(state.fetchers),\n        errors: {\n          [boundaryMatch.route.id]: result.error,\n        },\n      });\n      return;\n    }\n\n    // Mark the fetcher as done\n    let doneFetcher: FetcherStates[\"Done\"] = {\n      state: \"idle\",\n      type: \"done\",\n      data: result.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n    };\n    state.fetchers.set(key, doneFetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n  }\n\n  async function startRedirectNavigation(\n    redirect: RedirectResult,\n    transition: Transition\n  ) {\n    if (redirect.revalidate) {\n      isRevalidationRequired = true;\n    }\n    invariant(\n      transition.location,\n      \"Expected a location on the redirect transition\"\n    );\n    await startNavigation(HistoryAction.Replace, transition.location, {\n      overrideTransition: transition,\n    });\n  }\n\n  function deleteFetcher(key: string): void {\n    if (fetchControllers.has(key)) abortFetcher(key);\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    state.fetchers.delete(key);\n  }\n\n  function abortFetcher(key: string) {\n    let controller = fetchControllers.get(key);\n    invariant(controller, `Expected fetch controller: ${key}`);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n\n  function markFetchersDone(keys: string[]) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher: FetcherStates[\"Done\"] = {\n        state: \"idle\",\n        type: \"done\",\n        data: fetcher.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  function markFetchRedirectsDone(): void {\n    let doneKeys = [];\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, `Expected fetcher: ${key}`);\n      if (fetcher.type === \"submissionRedirect\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n      }\n    }\n    markFetchersDone(doneKeys);\n  }\n\n  function abortStaleFetchLoads(landedId: number): boolean {\n    let yeetedKeys = [];\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, `Expected fetcher: ${key}`);\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n\n  let router: Router = {\n    get state() {\n      return state;\n    },\n    subscribe(fn: RouterSubscriber) {\n      if (subscriber) {\n        throw new Error(\"A router only accepts one active subscriber\");\n      }\n      subscriber = fn;\n      return () => {\n        subscriber = null;\n      };\n    },\n    cleanup() {\n      subscriber = null;\n      pendingNavigationController?.abort();\n      for (let [, controller] of fetchControllers) {\n        controller.abort();\n      }\n    },\n    navigate,\n    fetch,\n    revalidate,\n    createHref,\n    getFetcher,\n    deleteFetcher,\n    _internalFetchControllers: fetchControllers,\n  };\n\n  return router;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n\nfunction convertRoutesToDataRoutes(\n  routes: RouteObject[],\n  parentPath: number[] = [],\n  allIds: Set<string> = new Set<string>()\n): DataRouteObject[] {\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, index];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(\n      !allIds.has(id),\n      `Found a route id collision on id \"${id}\".  Route ` +\n        \"id's must be globally unique within Data Router usages\"\n    );\n    allIds.add(id);\n    let dataRoute: DataRouteObject = {\n      ...route,\n      id,\n      children: route.children\n        ? convertRoutesToDataRoutes(route.children, treePath, allIds)\n        : undefined,\n    };\n    return dataRoute;\n  });\n}\n\nfunction getLoaderRedirect(\n  state: RouterState,\n  redirect: RedirectResult\n): Transition {\n  let redirectLocation = createLocation(state.location, redirect.location);\n  if (\n    state.transition.type === \"loaderSubmission\" ||\n    state.transition.type === \"actionReload\"\n  ) {\n    let { formMethod, formAction, formEncType, formData } = state.transition;\n    let transition: TransitionStates[\"SubmissionRedirect\"] = {\n      state: \"loading\",\n      type: \"submissionRedirect\",\n      location: redirectLocation,\n      formMethod,\n      formAction,\n      formEncType,\n      formData,\n    };\n    return transition;\n  } else {\n    let transition: TransitionStates[\"LoadingRedirect\"] = {\n      state: \"loading\",\n      type: \"normalRedirect\",\n      location: redirectLocation,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n    };\n    return transition;\n  }\n}\n\nfunction getMatchesToLoad(\n  state: RouterState,\n  matches: DataRouteMatch[],\n  transition: Transition,\n  location: Location,\n  isRevalidationRequired: boolean,\n  pendingActionData: RouteData | null,\n  pendingActionError: RouteData | null,\n  revalidatingFetcherMatches: Map<string, [string, DataRouteMatch]>\n): [DataRouteMatch[], [string, string, DataRouteMatch][]] {\n  // Determine which routes to run loaders for, filter out all routes below\n  // any caught action error as they aren't going to render so we don't\n  // need to load them\n  let deepestRenderableMatchIndex = pendingActionError\n    ? matches.findIndex(\n        (m) => m.route.id === Object.keys(pendingActionError)[0]\n      )\n    : matches.length;\n\n  let actionResult = pendingActionError\n    ? Object.values(pendingActionError)[0]\n    : pendingActionData\n    ? Object.values(pendingActionData)[0]\n    : null;\n\n  // Pick navigation matches that are net-new or qualify for revalidation\n  let navigationMatches = matches.filter((match, index) => {\n    if (!match.route.loader || index >= deepestRenderableMatchIndex) {\n      return false;\n    }\n    return (\n      isNewLoader(state.loaderData, state.matches[index], match) ||\n      shouldRevalidateLoader(\n        state.location,\n        state.matches[index],\n        transition,\n        location,\n        match,\n        isRevalidationRequired,\n        actionResult\n      )\n    );\n  });\n\n  // If revalidation is required, pick fetchers that qualify\n  let revalidatingFetchers: [string, string, DataRouteMatch][] = [];\n  if (isRevalidationRequired) {\n    for (let entry of revalidatingFetcherMatches.entries()) {\n      let [key, [href, match]] = entry;\n      let shouldRevalidate = shouldRevalidateLoader(\n        href,\n        match,\n        transition,\n        href,\n        match,\n        isRevalidationRequired,\n        actionResult\n      );\n      if (shouldRevalidate) {\n        revalidatingFetchers.push([key, href, match]);\n      }\n    }\n  }\n\n  return [navigationMatches, revalidatingFetchers];\n}\n\nfunction isNewLoader(\n  currentLoaderData: RouteData,\n  currentMatch: DataRouteMatch,\n  match: DataRouteMatch\n) {\n  let isNew =\n    // [a] -> [a, b]\n    !currentMatch ||\n    // [a, b] -> [a, c]\n    match.route.id !== currentMatch.route.id;\n\n  // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error\n  let isMissingData = currentLoaderData[match.route.id] === undefined;\n\n  // Always load if this is a net-new route or we don't yet have data\n  return isNew || isMissingData;\n}\n\nfunction shouldRevalidateLoader(\n  currentLocation: string | Location,\n  currentMatch: DataRouteMatch,\n  transition: Transition,\n  location: string | Location,\n  match: DataRouteMatch,\n  isRevalidationRequired: boolean,\n  actionResult: DataResult | null\n) {\n  let currentUrl = createURL(currentLocation);\n  let currentParams = currentMatch.params;\n  let nextUrl = createURL(location);\n  let nextParams = match.params;\n\n  // This is the default implementation as to when we revalidate.  If the route\n  // provides it's own implementation, then we give them full control but\n  // provide this value so they can leverage it if needed after they check\n  // their own specific use cases\n  // Note that fetchers always provide the same current/next locations so the\n  // URL-based checks here don't apply to fetcher shouldRevalidate calls\n  let defaultShouldRevalidate =\n    // param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname ||\n    // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    (currentMatch.route.path?.endsWith(\"*\") &&\n      currentMatch.params[\"*\"] !== match.params[\"*\"]) ||\n    // Clicked the same link, resubmitted a GET form\n    currentUrl.toString() === nextUrl.toString() ||\n    // Search params affect all loaders\n    currentUrl.search !== nextUrl.search ||\n    // Forced revalidation due to submission, useRevalidate, or X-Remix-Revalidate\n    isRevalidationRequired;\n\n  if (match.route.shouldRevalidate) {\n    return match.route.shouldRevalidate({\n      currentUrl,\n      currentParams,\n      nextUrl,\n      nextParams,\n      transition,\n      actionResult,\n      defaultShouldRevalidate,\n    });\n  }\n\n  return defaultShouldRevalidate;\n}\n\nasync function callLoaderOrAction(\n  match: DataRouteMatch,\n  location: string | Location,\n  signal: AbortSignal,\n  actionSubmission?: ActionSubmission\n): Promise<DataResult> {\n  let resultType = ResultType.data;\n  let result;\n\n  try {\n    let type: \"action\" | \"loader\" = actionSubmission ? \"action\" : \"loader\";\n    let handler = match.route[type];\n    invariant<Function>(\n      handler,\n      `Could not find the ${type} to run on the \"${match.route.id}\" route`\n    );\n\n    result = await handler({\n      params: match.params,\n      request: createRequest(location, actionSubmission),\n      signal,\n    });\n  } catch (e) {\n    resultType = ResultType.error;\n    result = e;\n  }\n\n  if (result instanceof Response) {\n    // Process redirects\n    let status = result.status;\n    let location = result.headers.get(\"Location\");\n    if (status >= 300 && status <= 399 && location != null) {\n      return {\n        type: ResultType.redirect,\n        status,\n        location,\n        revalidate: result.headers.get(\"X-Remix-Revalidate\") !== null,\n      };\n    }\n\n    // Automatically unwrap non-redirect success responses\n    if (resultType === ResultType.data) {\n      let contentType = result.headers.get(\"Content-Type\");\n      if (contentType?.startsWith(\"application/json\")) {\n        result = await result.json();\n      } else {\n        result = await result.text();\n      }\n    }\n  }\n\n  if (resultType === ResultType.error) {\n    return { type: resultType, error: result };\n  }\n\n  return { type: resultType, data: result };\n}\n\nfunction createRequest(\n  location: string | Location,\n  actionSubmission?: ActionSubmission\n): Request {\n  let init: RequestInit | undefined = undefined;\n\n  if (actionSubmission) {\n    let { formMethod, formEncType, formData } = actionSubmission;\n    let body = formData;\n\n    // If we're submitting application/x-www-form-urlencoded, then body should\n    // be of type URLSearchParams\n    if (formEncType === \"application/x-www-form-urlencoded\") {\n      body = new URLSearchParams();\n\n      for (let [key, value] of formData.entries()) {\n        invariant(\n          typeof value === \"string\",\n          'File inputs are not supported with encType \"application/x-www-form-urlencoded\", ' +\n            'please use \"multipart/form-data\" instead.'\n        );\n        body.append(key, value);\n      }\n    }\n\n    init = {\n      method: formMethod.toUpperCase(),\n      headers: {\n        \"Content-Type\": formEncType,\n      },\n      body,\n    };\n  }\n\n  let url = createURL(location).toString();\n  return new Request(url, init);\n}\n\nfunction processLoaderData(\n  state: RouterState,\n  matches: DataRouteMatch[],\n  matchesToLoad: DataRouteMatch[],\n  results: DataResult[],\n  pendingActionError: RouteData | null,\n  revalidatingFetchers: [string, string, DataRouteMatch][],\n  fetcherResults: DataResult[]\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors: RouterState[\"errors\"];\n} {\n  // Fill in loaderData/errors from our loaders\n  let loaderData: RouterState[\"loaderData\"] = {};\n  let errors: RouterState[\"errors\"] = null;\n\n  // Process loader results into state.loaderData/state.errors\n  results.forEach((result, index) => {\n    let id = matchesToLoad[index].route.id;\n    invariant(\n      !isRedirectResult(result),\n      \"Cannot handle redirect results in processLoaderData\"\n    );\n    if (isErrorResult(result)) {\n      // Look upwards from the matched route for the closest ancestor\n      // errorElement, defaulting to the root match\n      let boundaryMatch = findNearestBoundary(matches, id);\n      let error = result.error;\n      // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n      if (pendingActionError) {\n        error = Object.values(pendingActionError)[0];\n        pendingActionError = null;\n      }\n      errors = Object.assign(errors || {}, {\n        [boundaryMatch.route.id]: error,\n      });\n    } else {\n      loaderData[id] = result.data;\n    }\n  });\n\n  // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here\n  if (pendingActionError) {\n    errors = pendingActionError;\n  }\n\n  // Process results from our revalidating fetchers\n  revalidatingFetchers.forEach(([key, href, match], index) => {\n    let result = fetcherResults[index];\n\n    // Process fetcher non-redirect errors\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match.route.id);\n      if (!errors?.[boundaryMatch.route.id]) {\n        errors = {\n          ...errors,\n          [boundaryMatch.route.id]: result.error,\n        };\n      }\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      invariant(false, \"Unhandled fetcher revalidation redirect\");\n    } else {\n      let doneFetcher: FetcherStates[\"Done\"] = {\n        state: \"idle\",\n        type: \"done\",\n        data: result.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  });\n\n  return { loaderData, errors };\n}\n\nfunction mergeLoaderData(\n  state: RouterState,\n  newState: Partial<RouterState>\n): RouteData {\n  // Identify active routes that have current loaderData and didn't receive new\n  // loaderData\n  let reusedRoutesWithData = (newState.matches || state.matches).filter(\n    (match) =>\n      state.loaderData[match.route.id] !== undefined &&\n      newState.loaderData?.[match.route.id] === undefined\n  );\n  return {\n    ...newState.loaderData,\n    ...reusedRoutesWithData.reduce(\n      (acc, match) =>\n        Object.assign(acc, {\n          [match.route.id]: state.loaderData[match.route.id],\n        }),\n      {}\n    ),\n  };\n}\n\n// Find the nearest error boundary, looking upwards from the matched route\n// for the closest ancestor errorElement, defaulting to the root match\nfunction findNearestBoundary(\n  matches: DataRouteMatch[],\n  routeId: string\n): DataRouteMatch {\n  return (\n    matches\n      .slice(0, matches.findIndex((m) => m.route.id === routeId) + 1)\n      .reverse()\n      .find((m) => m.route.errorElement) || matches[0]\n  );\n}\n\nfunction getNotFoundMatches(routes: DataRouteObject[]): DataRouteMatch[] {\n  return [\n    {\n      params: {},\n      pathname: \"\",\n      pathnameBase: \"\",\n      route: routes[0],\n    },\n  ];\n}\n\n// Find any returned redirect errors, starting from the lowest match\nfunction findRedirect(results: DataResult[]): RedirectResult | undefined {\n  for (let i = results.length - 1; i >= 0; i--) {\n    let result = results[i];\n    if (isRedirectResult(result)) {\n      return result;\n    }\n  }\n}\n\n// Create an href to represent a \"server\" URL without the hash\nfunction createHref(location: Location | URL) {\n  return location.pathname + location.search;\n}\n\nfunction isHashChangeOnly(a: Location, b: Location): boolean {\n  return (\n    a.pathname === b.pathname && a.search === b.search && a.hash !== b.hash\n  );\n}\n\nfunction isErrorResult(result: DataResult): result is ErrorResult {\n  return result.type === ResultType.error;\n}\n\nfunction isRedirectResult(result?: DataResult): result is RedirectResult {\n  return result?.type === ResultType.redirect;\n}\n\nfunction isSubmissionNavigation(\n  opts?: NavigateOptions\n): opts is SubmissionNavigateOptions {\n  return opts != null && \"formData\" in opts && opts.formData != null;\n}\n\nfunction isActionSubmission(\n  submission: Submission\n): submission is ActionSubmission {\n  return submission && submission.formMethod !== \"get\";\n}\n\nfunction hasNakedIndexQuery(search: string): boolean {\n  return new URLSearchParams(search).getAll(\"index\").some((v) => v === \"\");\n}\n\nfunction createURL(location: Location | string): URL {\n  let base =\n    typeof window !== \"undefined\" && typeof window.location !== \"undefined\"\n      ? window.location.origin\n      : \"unknown://unknown\";\n  let href = typeof location === \"string\" ? location : createHref(location);\n  return new URL(href, base);\n}\n\n//#endregion\n","import type {\n  BrowserHistory,\n  BrowserHistoryOptions,\n  HashHistory,\n  HashHistoryOptions,\n  History,\n  InitialEntry,\n  Location,\n  MemoryHistory,\n  MemoryHistoryOptions,\n  Path,\n  To,\n} from \"./history\";\nimport {\n  Action,\n  createBrowserHistory,\n  createHashHistory,\n  createMemoryHistory,\n  createPath,\n  parsePath,\n} from \"./history\";\nimport type {\n  DataRouteMatch,\n  Fetcher,\n  HydrationState,\n  NavigateOptions,\n  Transition,\n  Router,\n  RouterState,\n  RouteData,\n  RouterInit,\n} from \"./router\";\nimport { IDLE_TRANSITION, createRouter } from \"./router\";\nimport type {\n  ActionFunctionArgs,\n  DataRouteObject,\n  FormEncType,\n  FormMethod,\n  LoaderFunctionArgs,\n  ParamParseKey,\n  Params,\n  PathMatch,\n  PathPattern,\n  RouteMatch,\n  RouteObject,\n  Submission,\n} from \"./utils\";\nimport {\n  generatePath,\n  getToPathname,\n  invariant,\n  joinPaths,\n  matchPath,\n  matchRoutes,\n  normalizePathname,\n  normalizeSearch,\n  normalizeHash,\n  resolvePath,\n  resolveTo,\n  stripBasename,\n  warning,\n  warningOnce,\n} from \"./utils\";\n\ntype MemoryRouterInit = MemoryHistoryOptions & Omit<RouterInit, \"history\">;\nfunction createMemoryRouter({\n  initialEntries,\n  initialIndex,\n  ...routerInit\n}: MemoryRouterInit): Router {\n  let history = createMemoryHistory({ initialEntries, initialIndex });\n  return createRouter({ history, ...routerInit });\n}\n\ntype BrowserRouterInit = BrowserHistoryOptions & Omit<RouterInit, \"history\">;\nfunction createBrowserRouter({\n  window,\n  ...routerInit\n}: BrowserRouterInit): Router {\n  let history = createBrowserHistory({ window });\n  return createRouter({ history, ...routerInit });\n}\n\ntype HashRouterInit = HashHistoryOptions & Omit<RouterInit, \"history\">;\nfunction createHashRouter({ window, ...routerInit }: HashRouterInit): Router {\n  let history = createHashHistory({ window });\n  return createRouter({ history, ...routerInit });\n}\n\n// @remix-run/router public Type API\nexport type {\n  ActionFunctionArgs,\n  BrowserHistory,\n  BrowserRouterInit,\n  DataRouteMatch,\n  DataRouteObject,\n  Fetcher,\n  FormEncType,\n  FormMethod,\n  HashHistory,\n  HashRouterInit,\n  History,\n  HydrationState,\n  InitialEntry,\n  LoaderFunctionArgs,\n  Location,\n  MemoryHistory,\n  MemoryRouterInit,\n  NavigateOptions,\n  ParamParseKey,\n  Params,\n  Path,\n  PathMatch,\n  PathPattern,\n  RouteData,\n  RouteMatch,\n  RouteObject,\n  Router,\n  RouterInit,\n  RouterState,\n  Submission,\n  To,\n  Transition,\n};\n\n// @remix-run/router public API\nexport {\n  Action,\n  IDLE_TRANSITION,\n  createBrowserHistory,\n  createBrowserRouter,\n  createHashHistory,\n  createHashRouter,\n  createMemoryRouter,\n  createMemoryHistory,\n  createPath,\n  createRouter,\n  generatePath,\n  getToPathname,\n  invariant,\n  joinPaths,\n  matchPath,\n  matchRoutes,\n  normalizeHash,\n  normalizePathname,\n  normalizeSearch,\n  parsePath,\n  resolvePath,\n  resolveTo,\n  stripBasename,\n  warning,\n  warningOnce,\n};\n"],"names":["Action","createMemoryHistory","options","entries","initialEntries","initialIndex","v5Compat","map","entry","index","createMemoryLocation","undefined","clampIndex","length","action","Pop","listeners","createEvents","n","Math","min","max","getCurrentLocation","to","state","key","createLocation","pathname","location","createHref","createPath","push","Push","nextLocation","splice","call","replace","Replace","go","delta","listen","listener","createBrowserHistory","getUrlBasedHistory","window","globalHistory","search","hash","usr","createHashHistory","parsePath","substr","base","document","querySelector","href","getAttribute","url","hashIndex","indexOf","slice","handlers","fn","filter","handler","arg","forEach","getHistoryState","current","random","toString","charAt","path","parsedPath","searchIndex","getLocation","validateLocation","defaultView","history","addEventListener","historyState","pushState","error","assign","replaceState","matchRoutes","routes","locationArg","basename","stripBasename","branches","flattenRoutes","sort","a","b","score","every","i","compareIndexes","routesMeta","meta","childrenIndex","rankRouteBranches","matches","matchRouteBranch","parentsMeta","parentPath","route","relativePath","caseSensitive","startsWith","invariant","joinPaths","concat","children","computeScore","paramRe","isSplat","s","segments","split","initialScore","some","reduce","segment","test","branch","matchedParams","matchedPathname","end","remainingPathname","match","matchPath","Object","params","pathnameBase","normalizePathname","pattern","matcher","paramNames","regexpSource","_","paramName","endsWith","RegExp","compilePath","captureGroups","memo","splatValue","value","decodeURIComponent","safelyDecodeURIComponent","toLowerCase","nextChar","message","Error","resolvePath","fromPathname","toPathname","pop","join","resolvePathname","normalizeSearch","normalizeHash","paths","ResultType","IDLE_TRANSITION","type","formMethod","formAction","formEncType","formData","IDLE_FETCHER","data","createRouter","init","dataRoutes","convertRoutesToDataRoutes","subscriber","initialMatches","getNotFoundMatches","foundMissingHydrationData","hydrationData","errors","loaderData","m","loader","id","console","warn","pendingNavigationController","historyAction","initialized","transition","revalidation","actionData","fetchers","Map","pendingAction","isUninterruptedRevalidation","isRevalidationRequired","fetchControllers","incrementingLoadId","pendingNavigationLoadId","fetchReloadIds","fetchRedirectIds","Set","fetchLoadMatches","updateState","newState","completeNavigation","mergeLoaderData","HistoryAction","startNavigation","opts","abort","startUninterruptedRevalidation","loadingTransition","overrideTransition","Response","status","pendingActionData","pendingActionError","submission","isActionSubmission","actionOutput","hasNakedIndexQuery","result","actionMatch","actionAbortController","AbortController","callLoaderOrAction","signal","aborted","shortCircuited","isRedirectResult","redirectTransition","startRedirectNavigation","isErrorResult","findNearestBoundary","handleAction","matchesToLoad","revalidatingFetchers","getMatchesToLoad","_ref2","revalidatingFetcher","get","_state$fetchers$get","set","abortController","_ref3","results","Promise","all","_ref4","navigationResults","fetcherResults","delete","redirect","findRedirect","getLoaderRedirect","processLoaderData","doneKeys","fetcher","markFetchersDone","markFetchRedirectsDone","didAbortFetchLoads","abortStaleFetchLoads","handleLoaders","getFetcher","handleFetcherLoader","loadingFetcher","boundaryMatch","doneFetcher","revalidate","abortFetcher","controller","keys","landedId","yeetedKeys","_ref","subscribe","cleanup","navigate","isSubmissionNavigation","fetch","has","actionResult","add","loadId","loadFetcher","_ref5","staleKey","_ref6","_state$fetchers$get5","_ref7","loaderResults","loaderRedirect","handleFetcherAction","transitionState","deleteFetcher","_internalFetchControllers","allIds","treePath","redirectLocation","revalidatingFetcherMatches","deepestRenderableMatchIndex","findIndex","values","navigationMatches","currentLoaderData","currentMatch","isNew","isMissingData","isNewLoader","shouldRevalidateLoader","currentLocation","currentUrl","createURL","currentParams","nextUrl","nextParams","defaultShouldRevalidate","shouldRevalidate","async","actionSubmission","resultType","request","createRequest","e","headers","contentType","json","text","body","URLSearchParams","append","method","toUpperCase","Request","_errors","reusedRoutesWithData","acc","routeId","reverse","find","errorElement","getAll","v","origin","URL","routerInit","toArg","routePathnames","locationPathname","from","routePathnameIndex","toSegments","shift","cond"],"mappings":"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"}