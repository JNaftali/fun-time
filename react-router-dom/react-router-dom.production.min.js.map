{"version":3,"file":"react-router-dom.production.min.js","sources":["../../../packages/react-router-dom/dom.ts","../../../packages/react-router-dom/index.tsx"],"sourcesContent":["import type { FormEncType, FormMethod } from \"@remix-run/router\";\n\nexport const defaultMethod = \"get\";\nexport const defaultEncType = \"application/x-www-form-urlencoded\";\n\nexport function isHtmlElement(object: any): object is HTMLElement {\n  return object != null && typeof object.tagName === \"string\";\n}\n\nexport function isButtonElement(object: any): object is HTMLButtonElement {\n  return isHtmlElement(object) && object.tagName.toLowerCase() === \"button\";\n}\n\nexport function isFormElement(object: any): object is HTMLFormElement {\n  return isHtmlElement(object) && object.tagName.toLowerCase() === \"form\";\n}\n\nexport function isInputElement(object: any): object is HTMLInputElement {\n  return isHtmlElement(object) && object.tagName.toLowerCase() === \"input\";\n}\n\ntype LimitedMouseEvent = Pick<\n  MouseEvent,\n  \"button\" | \"metaKey\" | \"altKey\" | \"ctrlKey\" | \"shiftKey\"\n>;\n\nfunction isModifiedEvent(event: LimitedMouseEvent) {\n  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);\n}\n\nexport function shouldProcessLinkClick(\n  event: LimitedMouseEvent,\n  target?: string\n) {\n  return (\n    event.button === 0 && // Ignore everything but left clicks\n    (!target || target === \"_self\") && // Let browser handle \"target=_blank\" etc.\n    !isModifiedEvent(event) // Ignore clicks with modifier keys\n  );\n}\n\nexport type ParamKeyValuePair = [string, string];\n\nexport type URLSearchParamsInit =\n  | string\n  | ParamKeyValuePair[]\n  | Record<string, string | string[]>\n  | URLSearchParams;\n\n/**\n * Creates a URLSearchParams object using the given initializer.\n *\n * This is identical to `new URLSearchParams(init)` except it also\n * supports arrays as values in the object form of the initializer\n * instead of just strings. This is convenient when you need multiple\n * values for a given key, but don't want to use an array initializer.\n *\n * For example, instead of:\n *\n *   let searchParams = new URLSearchParams([\n *     ['sort', 'name'],\n *     ['sort', 'price']\n *   ]);\n *\n * you can do:\n *\n *   let searchParams = createSearchParams({\n *     sort: ['name', 'price']\n *   });\n */\nexport function createSearchParams(\n  init: URLSearchParamsInit = \"\"\n): URLSearchParams {\n  return new URLSearchParams(\n    typeof init === \"string\" ||\n    Array.isArray(init) ||\n    init instanceof URLSearchParams\n      ? init\n      : Object.keys(init).reduce((memo, key) => {\n          let value = init[key];\n          return memo.concat(\n            Array.isArray(value) ? value.map((v) => [key, v]) : [[key, value]]\n          );\n        }, [] as ParamKeyValuePair[])\n  );\n}\n\nexport function getSearchParamsForLocation(\n  locationSearch: string,\n  defaultSearchParams: URLSearchParams\n) {\n  let searchParams = createSearchParams(locationSearch);\n\n  for (let key of defaultSearchParams.keys()) {\n    if (!searchParams.has(key)) {\n      defaultSearchParams.getAll(key).forEach((value) => {\n        searchParams.append(key, value);\n      });\n    }\n  }\n\n  return searchParams;\n}\n\nexport interface SubmitOptions {\n  /**\n   * The HTTP method used to submit the form. Overrides `<form method>`.\n   * Defaults to \"GET\".\n   */\n  method?: FormMethod;\n\n  /**\n   * The action URL path used to submit the form. Overrides `<form action>`.\n   * Defaults to the path of the current route.\n   *\n   * Note: It is assumed the path is already resolved. If you need to resolve a\n   * relative path, use `useFormAction`.\n   */\n  action?: string;\n\n  /**\n   * The action URL used to submit the form. Overrides `<form encType>`.\n   * Defaults to \"application/x-www-form-urlencoded\".\n   */\n  encType?: FormEncType;\n\n  /**\n   * Set `true` to replace the current entry in the browser's history stack\n   * instead of creating a new one (i.e. stay on \"the same page\"). Defaults\n   * to `false`.\n   */\n  replace?: boolean;\n}\n\nexport function getFormSubmissionInfo(\n  target:\n    | HTMLFormElement\n    | HTMLButtonElement\n    | HTMLInputElement\n    | FormData\n    | URLSearchParams\n    | { [name: string]: string }\n    | null,\n  defaultAction: string,\n  options: SubmitOptions\n): {\n  url: URL;\n  method: string;\n  encType: string;\n  formData: FormData;\n} {\n  let method: string;\n  let action: string;\n  let encType: string;\n  let formData: FormData;\n\n  if (isFormElement(target)) {\n    let submissionTrigger: HTMLButtonElement | HTMLInputElement = (\n      options as any\n    ).submissionTrigger;\n\n    method = options.method || target.getAttribute(\"method\") || defaultMethod;\n    action = options.action || target.getAttribute(\"action\") || defaultAction;\n    encType =\n      options.encType || target.getAttribute(\"enctype\") || defaultEncType;\n\n    formData = new FormData(target);\n\n    if (submissionTrigger && submissionTrigger.name) {\n      formData.append(submissionTrigger.name, submissionTrigger.value);\n    }\n  } else if (\n    isButtonElement(target) ||\n    (isInputElement(target) &&\n      (target.type === \"submit\" || target.type === \"image\"))\n  ) {\n    let form = target.form;\n\n    if (form == null) {\n      throw new Error(\n        `Cannot submit a <button> or <input type=\"submit\"> without a <form>`\n      );\n    }\n\n    // <button>/<input type=\"submit\"> may override attributes of <form>\n\n    method =\n      options.method ||\n      target.getAttribute(\"formmethod\") ||\n      form.getAttribute(\"method\") ||\n      defaultMethod;\n    action =\n      options.action ||\n      target.getAttribute(\"formaction\") ||\n      form.getAttribute(\"action\") ||\n      defaultAction;\n    encType =\n      options.encType ||\n      target.getAttribute(\"formenctype\") ||\n      form.getAttribute(\"enctype\") ||\n      defaultEncType;\n\n    formData = new FormData(form);\n\n    // Include name + value from a <button>\n    if (target.name) {\n      formData.set(target.name, target.value);\n    }\n  } else if (isHtmlElement(target)) {\n    throw new Error(\n      `Cannot submit element that is not <form>, <button>, or ` +\n        `<input type=\"submit|image\">`\n    );\n  } else {\n    method = options.method || defaultMethod;\n    action = options.action || defaultAction;\n    encType = options.encType || defaultEncType;\n\n    if (target instanceof FormData) {\n      formData = target;\n    } else {\n      formData = new FormData();\n\n      if (target instanceof URLSearchParams) {\n        for (let [name, value] of target) {\n          formData.append(name, value);\n        }\n      } else if (target != null) {\n        for (let name of Object.keys(target)) {\n          formData.append(name, target[name]);\n        }\n      }\n    }\n  }\n\n  let { protocol, host } = window.location;\n  let url = new URL(action, `${protocol}//${host}`);\n\n  if (method.toLowerCase() === \"get\") {\n    for (let [name, value] of formData) {\n      if (typeof value === \"string\") {\n        url.searchParams.append(name, value);\n      } else {\n        throw new Error(`Cannot submit binary form data using GET`);\n      }\n    }\n  }\n\n  return { url, method, encType, formData };\n}\n","/**\n * NOTE: If you refactor this to split up the modules into separate files,\n * you'll need to update the rollup config for react-router-dom-v5-compat.\n */\nimport * as React from \"react\";\nimport {\n  MemoryRouter,\n  DataMemoryRouter,\n  Navigate,\n  Outlet,\n  Route,\n  Router,\n  Routes,\n  createRoutesFromChildren,\n  generatePath,\n  matchRoutes,\n  matchPath,\n  createPath,\n  parsePath,\n  resolvePath,\n  renderMatches,\n  useHref,\n  useInRouterContext,\n  useLocation,\n  useMatch,\n  useNavigate,\n  useNavigationType,\n  useOutlet,\n  useParams,\n  useResolvedPath,\n  useRoutes,\n  useOutletContext,\n  useActionData,\n  useLoaderData,\n  useMatches,\n  useNavigation,\n  useRouteLoaderData,\n  useRouteError,\n  useRevalidator,\n  UNSAFE_useRenderDataRouter,\n  UNSAFE_RouteContext,\n  UNSAFE_DataRouterContext,\n  UNSAFE_DataRouterStateContext,\n} from \"react-router\";\nimport type { To } from \"react-router\";\nimport type {\n  BrowserHistory,\n  Fetcher,\n  HashHistory,\n  History,\n} from \"@remix-run/router\";\nimport {\n  createBrowserHistory,\n  createHashHistory,\n  createBrowserRouter,\n  createHashRouter,\n  FormEncType,\n  FormMethod,\n  HydrationState,\n  invariant,\n  RouteObject,\n} from \"@remix-run/router\";\n\nimport type { SubmitOptions, URLSearchParamsInit } from \"./dom\";\nimport {\n  createSearchParams,\n  defaultEncType,\n  defaultMethod,\n  getFormSubmissionInfo,\n  getSearchParamsForLocation,\n  shouldProcessLinkClick,\n} from \"./dom\";\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Re-exports\n////////////////////////////////////////////////////////////////////////////////\n\n// Note: Keep in sync with react-router exports!\nexport {\n  MemoryRouter,\n  DataMemoryRouter,\n  Navigate,\n  Outlet,\n  Route,\n  Router,\n  Routes,\n  createRoutesFromChildren,\n  generatePath,\n  matchRoutes,\n  matchPath,\n  createPath,\n  createSearchParams,\n  parsePath,\n  renderMatches,\n  resolvePath,\n  useHref,\n  useInRouterContext,\n  useLocation,\n  useMatch,\n  useNavigate,\n  useNavigationType,\n  useOutlet,\n  useParams,\n  useResolvedPath,\n  useRoutes,\n  useOutletContext,\n  useActionData,\n  useLoaderData,\n  useMatches,\n  useNavigation,\n  useRouteLoaderData,\n  useRouteError,\n  useRevalidator,\n};\n\nexport { NavigationType } from \"react-router\";\nexport type {\n  Hash,\n  Location,\n  Path,\n  To,\n  MemoryRouterProps,\n  NavigateFunction,\n  NavigateOptions,\n  NavigateProps,\n  Navigator,\n  OutletProps,\n  Params,\n  PathMatch,\n  RouteMatch,\n  RouteObject,\n  RouteProps,\n  PathRouteProps,\n  LayoutRouteProps,\n  IndexRouteProps,\n  RouterProps,\n  Pathname,\n  Search,\n  RoutesProps,\n} from \"react-router\";\n\n///////////////////////////////////////////////////////////////////////////////\n// DANGER! PLEASE READ ME!\n// We provide these exports as an escape hatch in the event that you need any\n// routing data that we don't provide an explicit API for. With that said, we\n// want to cover your use case if we can, so if you feel the need to use these\n// we want to hear from you. Let us know what you're building and we'll do our\n// best to make sure we can support you!\n//\n// We consider these exports an implementation detail and do not guarantee\n// against any breaking changes, regardless of the semver release. Use with\n// extreme caution and only if you understand the consequences. Godspeed.\n///////////////////////////////////////////////////////////////////////////////\n\n/** @internal */\nexport {\n  UNSAFE_NavigationContext,\n  UNSAFE_LocationContext,\n  UNSAFE_RouteContext,\n  UNSAFE_DataRouterContext,\n  UNSAFE_DataRouterStateContext,\n  UNSAFE_useRenderDataRouter,\n} from \"react-router\";\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Components\n////////////////////////////////////////////////////////////////////////////////\n\nexport interface DataBrowserRouterProps {\n  children?: React.ReactNode;\n  hydrationData?: HydrationState;\n  fallbackElement?: React.ReactElement;\n  window?: Window;\n}\n\nexport function DataBrowserRouter({\n  children,\n  fallbackElement,\n  hydrationData,\n  window,\n}: DataBrowserRouterProps): React.ReactElement {\n  return UNSAFE_useRenderDataRouter({\n    children,\n    fallbackElement,\n    createRouter: (routes: RouteObject[]) =>\n      createBrowserRouter({\n        routes,\n        hydrationData,\n        window,\n      }),\n  });\n}\n\nexport interface DataHashRouterProps {\n  children?: React.ReactNode;\n  hydrationData?: HydrationState;\n  fallbackElement?: React.ReactElement;\n  window?: Window;\n}\n\nexport function DataHashRouter({\n  children,\n  hydrationData,\n  fallbackElement,\n  window,\n}: DataBrowserRouterProps): React.ReactElement {\n  return UNSAFE_useRenderDataRouter({\n    children,\n    fallbackElement,\n    createRouter: (routes: RouteObject[]) =>\n      createHashRouter({\n        routes,\n        hydrationData,\n        window,\n      }),\n  });\n}\n\nexport interface BrowserRouterProps {\n  basename?: string;\n  children?: React.ReactNode;\n  window?: Window;\n}\n\n/**\n * A `<Router>` for use in web browsers. Provides the cleanest URLs.\n */\nexport function BrowserRouter({\n  basename,\n  children,\n  window,\n}: BrowserRouterProps) {\n  let historyRef = React.useRef<BrowserHistory>();\n  if (historyRef.current == null) {\n    historyRef.current = createBrowserHistory({ window, v5Compat: true });\n  }\n\n  let history = historyRef.current;\n  let [state, setState] = React.useState({\n    action: history.action,\n    location: history.location,\n  });\n\n  React.useLayoutEffect(() => history.listen(setState), [history]);\n\n  return (\n    <Router\n      basename={basename}\n      children={children}\n      location={state.location}\n      navigationType={state.action}\n      navigator={history}\n    />\n  );\n}\n\nexport interface HashRouterProps {\n  basename?: string;\n  children?: React.ReactNode;\n  window?: Window;\n}\n\n/**\n * A `<Router>` for use in web browsers. Stores the location in the hash\n * portion of the URL so it is not sent to the server.\n */\nexport function HashRouter({ basename, children, window }: HashRouterProps) {\n  let historyRef = React.useRef<HashHistory>();\n  if (historyRef.current == null) {\n    historyRef.current = createHashHistory({ window, v5Compat: true });\n  }\n\n  let history = historyRef.current;\n  let [state, setState] = React.useState({\n    action: history.action,\n    location: history.location,\n  });\n\n  React.useLayoutEffect(() => history.listen(setState), [history]);\n\n  return (\n    <Router\n      basename={basename}\n      children={children}\n      location={state.location}\n      navigationType={state.action}\n      navigator={history}\n    />\n  );\n}\n\nexport interface HistoryRouterProps {\n  basename?: string;\n  children?: React.ReactNode;\n  history: History;\n}\n\n/**\n * A `<Router>` that accepts a pre-instantiated history object. It's important\n * to note that using your own history object is highly discouraged and may add\n * two versions of the history library to your bundles unless you use the same\n * version of the history library that React Router uses internally.\n */\nfunction HistoryRouter({ basename, children, history }: HistoryRouterProps) {\n  const [state, setState] = React.useState({\n    action: history.action,\n    location: history.location,\n  });\n\n  React.useLayoutEffect(() => history.listen(setState), [history]);\n\n  return (\n    <Router\n      basename={basename}\n      children={children}\n      location={state.location}\n      navigationType={state.action}\n      navigator={history}\n    />\n  );\n}\n\nif (__DEV__) {\n  HistoryRouter.displayName = \"unstable_HistoryRouter\";\n}\n\nexport { HistoryRouter as unstable_HistoryRouter };\n\nexport interface LinkProps\n  extends Omit<React.AnchorHTMLAttributes<HTMLAnchorElement>, \"href\"> {\n  reloadDocument?: boolean;\n  replace?: boolean;\n  state?: any;\n  to: To;\n}\n\n/**\n * The public API for rendering a history-aware <a>.\n */\nexport const Link = React.forwardRef<HTMLAnchorElement, LinkProps>(\n  function LinkWithRef(\n    { onClick, reloadDocument, replace = false, state, target, to, ...rest },\n    ref\n  ) {\n    let href = useHref(to);\n    let internalOnClick = useLinkClickHandler(to, { replace, state, target });\n    function handleClick(\n      event: React.MouseEvent<HTMLAnchorElement, MouseEvent>\n    ) {\n      if (onClick) onClick(event);\n      if (!event.defaultPrevented && !reloadDocument) {\n        internalOnClick(event);\n      }\n    }\n\n    return (\n      // eslint-disable-next-line jsx-a11y/anchor-has-content\n      <a\n        {...rest}\n        href={href}\n        onClick={handleClick}\n        ref={ref}\n        target={target}\n      />\n    );\n  }\n);\n\nif (__DEV__) {\n  Link.displayName = \"Link\";\n}\n\nexport interface NavLinkProps\n  extends Omit<LinkProps, \"className\" | \"style\" | \"children\"> {\n  children?:\n    | React.ReactNode\n    | ((props: { isActive: boolean }) => React.ReactNode);\n  caseSensitive?: boolean;\n  className?: string | ((props: { isActive: boolean }) => string | undefined);\n  end?: boolean;\n  style?:\n    | React.CSSProperties\n    | ((props: { isActive: boolean }) => React.CSSProperties);\n}\n\n/**\n * A <Link> wrapper that knows if it's \"active\" or not.\n */\nexport const NavLink = React.forwardRef<HTMLAnchorElement, NavLinkProps>(\n  function NavLinkWithRef(\n    {\n      \"aria-current\": ariaCurrentProp = \"page\",\n      caseSensitive = false,\n      className: classNameProp = \"\",\n      end = false,\n      style: styleProp,\n      to,\n      children,\n      ...rest\n    },\n    ref\n  ) {\n    let location = useLocation();\n    let path = useResolvedPath(to);\n\n    let locationPathname = location.pathname;\n    let toPathname = path.pathname;\n    if (!caseSensitive) {\n      locationPathname = locationPathname.toLowerCase();\n      toPathname = toPathname.toLowerCase();\n    }\n\n    let isActive =\n      locationPathname === toPathname ||\n      (!end &&\n        locationPathname.startsWith(toPathname) &&\n        locationPathname.charAt(toPathname.length) === \"/\");\n\n    let ariaCurrent = isActive ? ariaCurrentProp : undefined;\n\n    let className: string | undefined;\n    if (typeof classNameProp === \"function\") {\n      className = classNameProp({ isActive });\n    } else {\n      // If the className prop is not a function, we use a default `active`\n      // class for <NavLink />s that are active. In v5 `active` was the default\n      // value for `activeClassName`, but we are removing that API and can still\n      // use the old default behavior for a cleaner upgrade path and keep the\n      // simple styling rules working as they currently do.\n      className = [classNameProp, isActive ? \"active\" : null]\n        .filter(Boolean)\n        .join(\" \");\n    }\n\n    let style =\n      typeof styleProp === \"function\" ? styleProp({ isActive }) : styleProp;\n\n    return (\n      <Link\n        {...rest}\n        aria-current={ariaCurrent}\n        className={className}\n        ref={ref}\n        style={style}\n        to={to}\n      >\n        {typeof children === \"function\" ? children({ isActive }) : children}\n      </Link>\n    );\n  }\n);\n\nif (__DEV__) {\n  NavLink.displayName = \"NavLink\";\n}\n\nexport interface FormProps extends React.FormHTMLAttributes<HTMLFormElement> {\n  /**\n   * The HTTP verb to use when the form is submit. Supports \"get\", \"post\",\n   * \"put\", \"delete\", \"patch\".\n   */\n  method?: FormMethod;\n\n  /**\n   * Normal `<form action>` but supports React Router's relative paths.\n   */\n  action?: string;\n\n  /**\n   * Normal `<form encType>`.\n   */\n  encType?: FormEncType;\n\n  /**\n   * Replaces the current entry in the browser history stack when the form\n   * navigates. Use this if you don't want the user to be able to click \"back\"\n   * to the page with the form on it.\n   */\n  replace?: boolean;\n\n  /**\n   * A function to call when the form is submitted. If you call\n   * `event.preventDefault()` then this form will not do anything.\n   */\n  onSubmit?: React.FormEventHandler<HTMLFormElement>;\n}\n\n/**\n * A `@remix-run/router`-aware `<form>`. It behaves like a normal form except\n * that the interaction with the server is with `fetch` instead of new document\n * requests, allowing components to add nicer UX to the page as the form is\n * submitted and returns with data.\n */\nexport const Form = React.forwardRef<HTMLFormElement, FormProps>(\n  (props, ref) => {\n    return <FormImpl {...props} ref={ref} />;\n  }\n);\n\nif (__DEV__) {\n  Form.displayName = \"Form\";\n}\n\ninterface FormImplProps extends FormProps {\n  fetcherKey?: string;\n}\n\nconst FormImpl = React.forwardRef<HTMLFormElement, FormImplProps>(\n  (\n    {\n      replace = false,\n      method = defaultMethod,\n      action = \".\",\n      encType = defaultEncType,\n      onSubmit,\n      fetcherKey,\n      ...props\n    },\n    forwardedRef\n  ) => {\n    let submit = useSubmitImpl(fetcherKey);\n    let formMethod: FormMethod =\n      method.toLowerCase() === \"get\" ? \"get\" : \"post\";\n    let formAction = useFormAction(action);\n    let formRef = React.useRef<HTMLFormElement>();\n    let ref = useComposedRefs(forwardedRef, formRef);\n\n    // When calling `submit` on the form element itself, we don't get data from\n    // the button that submitted the event. For example:\n    //\n    //   <Form>\n    //     <button name=\"something\" value=\"whatever\">Submit</button>\n    //   </Form>\n    //\n    // formData.get(\"something\") should be \"whatever\", but we don't get that\n    // unless we call submit on the clicked button itself.\n    //\n    // To figure out which button triggered the submit, we'll attach a click\n    // event listener to the form. The click event is always triggered before\n    // the submit event (even when submitting via keyboard when focused on\n    // another form field, yeeeeet) so we should have access to that button's\n    // data for use in the submit handler.\n    let clickedButtonRef = React.useRef<any>();\n\n    React.useEffect(() => {\n      let form = formRef.current;\n      if (!form) return;\n\n      function handleClick(event: MouseEvent) {\n        if (!(event.target instanceof Element)) return;\n        let submitButton = event.target.closest<\n          HTMLButtonElement | HTMLInputElement\n        >(\"button,input[type=submit]\");\n\n        if (\n          submitButton &&\n          submitButton.form === form &&\n          submitButton.type === \"submit\"\n        ) {\n          clickedButtonRef.current = submitButton;\n        }\n      }\n\n      window.addEventListener(\"click\", handleClick);\n      return () => {\n        window.removeEventListener(\"click\", handleClick);\n      };\n    }, []);\n\n    let submitHandler: React.FormEventHandler<HTMLFormElement> = (event) => {\n      onSubmit && onSubmit(event);\n      if (event.defaultPrevented) return;\n      event.preventDefault();\n\n      submit(clickedButtonRef.current || event.currentTarget, {\n        method,\n        replace,\n      });\n      clickedButtonRef.current = null;\n    };\n\n    return (\n      <form\n        ref={ref}\n        method={formMethod}\n        action={formAction}\n        encType={encType}\n        onSubmit={submitHandler}\n        {...props}\n      />\n    );\n  }\n);\n\nif (__DEV__) {\n  Form.displayName = \"Form\";\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Hooks\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Handles the click behavior for router `<Link>` components. This is useful if\n * you need to create custom `<Link>` components with the same click behavior we\n * use in our exported `<Link>`.\n */\nexport function useLinkClickHandler<E extends Element = HTMLAnchorElement>(\n  to: To,\n  {\n    target,\n    replace: replaceProp,\n    state,\n  }: {\n    target?: React.HTMLAttributeAnchorTarget;\n    replace?: boolean;\n    state?: any;\n  } = {}\n): (event: React.MouseEvent<E, MouseEvent>) => void {\n  let navigate = useNavigate();\n  let location = useLocation();\n  let path = useResolvedPath(to);\n\n  return React.useCallback(\n    (event: React.MouseEvent<E, MouseEvent>) => {\n      if (shouldProcessLinkClick(event, target)) {\n        event.preventDefault();\n\n        // If the URL hasn't changed, a regular <a> will do a replace instead of\n        // a push, so do the same here.\n        let replace =\n          !!replaceProp || createPath(location) === createPath(path);\n\n        navigate(to, { replace, state });\n      }\n    },\n    [location, navigate, path, replaceProp, state, target, to]\n  );\n}\n\n/**\n * A convenient wrapper for reading and writing search parameters via the\n * URLSearchParams interface.\n */\nexport function useSearchParams(defaultInit?: URLSearchParamsInit) {\n  warning(\n    typeof URLSearchParams !== \"undefined\",\n    `You cannot use the \\`useSearchParams\\` hook in a browser that does not ` +\n      `support the URLSearchParams API. If you need to support Internet ` +\n      `Explorer 11, we recommend you load a polyfill such as ` +\n      `https://github.com/ungap/url-search-params\\n\\n` +\n      `If you're unsure how to load polyfills, we recommend you check out ` +\n      `https://polyfill.io/v3/ which provides some recommendations about how ` +\n      `to load polyfills only for users that need them, instead of for every ` +\n      `user.`\n  );\n\n  let defaultSearchParamsRef = React.useRef(createSearchParams(defaultInit));\n\n  let location = useLocation();\n  let searchParams = React.useMemo(\n    () =>\n      getSearchParamsForLocation(\n        location.search,\n        defaultSearchParamsRef.current\n      ),\n    [location.search]\n  );\n\n  let navigate = useNavigate();\n  let setSearchParams = React.useCallback(\n    (\n      nextInit: URLSearchParamsInit,\n      navigateOptions?: { replace?: boolean; state?: any }\n    ) => {\n      navigate(\"?\" + createSearchParams(nextInit), navigateOptions);\n    },\n    [navigate]\n  );\n\n  return [searchParams, setSearchParams] as const;\n}\n\n/**\n * Submits a HTML `<form>` to the server without reloading the page.\n */\nexport interface SubmitFunction {\n  (\n    /**\n     * Specifies the `<form>` to be submitted to the server, a specific\n     * `<button>` or `<input type=\"submit\">` to use to submit the form, or some\n     * arbitrary data to submit.\n     *\n     * Note: When using a `<button>` its `name` and `value` will also be\n     * included in the form data that is submitted.\n     */\n    target:\n      | HTMLFormElement\n      | HTMLButtonElement\n      | HTMLInputElement\n      | FormData\n      | URLSearchParams\n      | { [name: string]: string }\n      | null,\n\n    /**\n     * Options that override the `<form>`'s own attributes. Required when\n     * submitting arbitrary data without a backing `<form>`.\n     */\n    options?: SubmitOptions\n  ): void;\n}\n\n/**\n * Returns a function that may be used to programmatically submit a form (or\n * some arbitrary data) to the server.\n */\nexport function useSubmit(): SubmitFunction {\n  return useSubmitImpl();\n}\n\nfunction useSubmitImpl(fetcherKey?: string): SubmitFunction {\n  let router = React.useContext(UNSAFE_DataRouterContext);\n  let defaultAction = useFormAction();\n\n  return React.useCallback(\n    (target, options = {}) => {\n      invariant(\n        router != null,\n        \"useSubmit() must be used within a <DataRouter>\"\n      );\n\n      if (typeof document === \"undefined\") {\n        throw new Error(\n          \"You are calling submit during the server render. \" +\n            \"Try calling submit within a `useEffect` or callback instead.\"\n        );\n      }\n\n      let { method, encType, formData, url } = getFormSubmissionInfo(\n        target,\n        defaultAction,\n        options\n      );\n\n      let href = url.pathname + url.search;\n      let opts = {\n        replace: options.replace,\n        formData,\n        formMethod: method as FormMethod,\n        formEncType: encType as FormEncType,\n      };\n      if (fetcherKey) {\n        router.fetch(fetcherKey, href, opts);\n      } else {\n        router.navigate(href, opts);\n      }\n    },\n    [defaultAction, router, fetcherKey]\n  );\n}\n\nexport function useFormAction(action = \".\"): string {\n  let routeContext = React.useContext(UNSAFE_RouteContext);\n  invariant(routeContext, \"useLoaderData must be used inside a RouteContext\");\n\n  let [match] = routeContext.matches.slice(-1);\n  let { pathname, search } = useResolvedPath(action);\n\n  if (action === \".\" && match.route.index) {\n    search = search ? search.replace(/^\\?/, \"?index&\") : \"?index\";\n  }\n\n  return pathname + search;\n}\n\nfunction useComposedRefs<RefValueType = any>(\n  ...refs: Array<React.Ref<RefValueType> | null | undefined>\n): React.RefCallback<RefValueType> {\n  return React.useCallback((node) => {\n    for (let ref of refs) {\n      if (ref == null) continue;\n      if (typeof ref === \"function\") {\n        ref(node);\n      } else {\n        try {\n          (ref as React.MutableRefObject<RefValueType>).current = node!;\n        } catch (_) {}\n      }\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, refs);\n}\n\nfunction createFetcherForm(fetcherKey: string) {\n  let FetcherForm = React.forwardRef<HTMLFormElement, FormProps>(\n    (props, ref) => {\n      return <FormImpl {...props} ref={ref} fetcherKey={fetcherKey} />;\n    }\n  );\n  if (__DEV__) {\n    FetcherForm.displayName = \"fetcher.Form\";\n  }\n  return FetcherForm;\n}\n\nlet fetcherId = 0;\n\ntype FetcherWithComponents<TData> = Fetcher<TData> & {\n  Form: ReturnType<typeof createFetcherForm>;\n  submit: ReturnType<typeof useSubmitImpl>;\n  load: (href: string) => void;\n};\n\n/**\n * Interacts with route loaders and actions without causing a navigation. Great\n * for any interaction that stays on the same page.\n */\nexport function useFetcher<TData = any>(): FetcherWithComponents<TData> {\n  let router = React.useContext(UNSAFE_DataRouterContext);\n  invariant(router, `useFetcher must be used within a DataRouter`);\n\n  let [fetcherKey] = React.useState(() => String(++fetcherId));\n  let [Form] = React.useState(() => createFetcherForm(fetcherKey));\n  let [load] = React.useState(() => (href: string) => {\n    invariant(router, `No router available for fetcher.load()`);\n    router.fetch(fetcherKey, href);\n  });\n  let submit = useSubmitImpl(fetcherKey);\n\n  let fetcher = router.getFetcher<TData>(fetcherKey);\n\n  let fetcherWithComponents = React.useMemo(\n    () => ({\n      Form,\n      submit,\n      load,\n      ...fetcher,\n    }),\n    [fetcher, Form, submit, load]\n  );\n\n  React.useEffect(() => {\n    // Is this busted when the React team gets real weird and calls effects\n    // twice on mount?  We really just need to garbage collect here when this\n    // fetcher is no longer around.\n    return () => {\n      if (!router) {\n        console.warn(\"No fetcher available to clean up from useFetcher()\");\n        return;\n      }\n      router.deleteFetcher(fetcherKey);\n    };\n  }, [router, fetcherKey]);\n\n  return fetcherWithComponents;\n}\n\n/**\n * Provides all fetchers currently on the page. Useful for layouts and parent\n * routes that need to provide pending/optimistic UI regarding the fetch.\n */\nexport function useFetchers(): Fetcher[] {\n  let state = React.useContext(UNSAFE_DataRouterStateContext);\n  invariant(state, `useFetchers must be used within a DataRouter`);\n  return [...state.fetchers.values()];\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Utils\n////////////////////////////////////////////////////////////////////////////////\n\nfunction warning(cond: boolean, message: string): void {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging React Router!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\n//#endregion\n"],"names":["defaultEncType","isHtmlElement","object","tagName","createSearchParams","init","URLSearchParams","Array","isArray","Object","keys","reduce","memo","key","value","concat","map","v","getFormSubmissionInfo","target","defaultAction","options","method","action","encType","formData","toLowerCase","submissionTrigger","getAttribute","FormData","name","append","isButtonElement","isInputElement","type","form","Error","set","protocol","host","window","location","url","URL","searchParams","DataBrowserRouter","children","fallbackElement","hydrationData","UNSAFE_useRenderDataRouter","createRouter","routes","createBrowserRouter","DataHashRouter","createHashRouter","BrowserRouter","basename","historyRef","React","current","createBrowserHistory","v5Compat","history","state","setState","listen","React.createElement","Router","navigationType","navigator","HashRouter","createHashHistory","HistoryRouter","Link","onClick","reloadDocument","replace","to","rest","ref","href","useHref","internalOnClick","useLinkClickHandler","event","defaultPrevented","NavLink","ariaCurrentProp","caseSensitive","className","classNameProp","end","style","styleProp","useLocation","path","useResolvedPath","locationPathname","pathname","toPathname","isActive","startsWith","charAt","length","ariaCurrent","undefined","filter","Boolean","join","Form","props","FormImpl","onSubmit","fetcherKey","forwardedRef","submit","useSubmitImpl","formMethod","formAction","useFormAction","formRef","refs","node","_","useComposedRefs","clickedButtonRef","addEventListener","handleClick","removeEventListener","Element","submitButton","closest","preventDefault","currentTarget","replaceProp","navigate","useNavigate","button","metaKey","altKey","ctrlKey","shiftKey","isModifiedEvent","shouldProcessLinkClick","createPath","useSearchParams","defaultInit","defaultSearchParamsRef","locationSearch","defaultSearchParams","has","getAll","forEach","getSearchParamsForLocation","search","nextInit","navigateOptions","useSubmit","router","UNSAFE_DataRouterContext","invariant","document","opts","formEncType","fetch","routeContext","UNSAFE_RouteContext","match","matches","slice","route","index","fetcherId","useFetcher","String","createFetcherForm","load","fetcher","getFetcher","fetcherWithComponents","deleteFetcher","console","warn","useFetchers","UNSAFE_DataRouterStateContext","fetchers","values"],"mappings":"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"}